package my.bowlingleague;

import java.io.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.datatransfer.*;
import java.awt.event.*;
import java.util.Arrays;
import java.util.Date;
import java.text.*;

/**
 * User interface for creating, manipulating and managing a bowling league.
 * UI designed using the NetBeans IDE 7.2.1
 * 
 * @author Mike Bowen
 */
public class BowlingLeagueUI extends javax.swing.JFrame {
    //stores the current league for manipulation
    private BowlingLeague league;
    //stores the team that is having scores entered
    private BowlingTeam enterScoreCurrentTeam;
    //flags to control what buttons/tabs are usable
    private boolean hasBeenSaved, leagueLoaded, enterScoresChanged;
    //stores the file the current league is saved at for saving purposes
    private File currentLeagueFile;
    //arrays to hold the text fields of the edit team pane, and text fiels for the enter score pane
    private JTextField[] editTeamBowlers, editTeamAverages, enterScoreGame1, enterScoreGame2, enterScoreGame3;
    //arrays to hold the buttons for the edit team pane
    private JButton[] moveBowlersUp, moveBowlersDown;
    //array to hold labels for manipulation in the view matchup pane, bowler names in enter score pane
    private JLabel[] viewMatchupTeams, enterScoreBowlers;
    
    
    /**
     * Creates new form BowlingLeagueUI
     */
    public BowlingLeagueUI() {
        initComponents();
        setLocationRelativeTo(null);
        
        //initialize flags
        hasBeenSaved = true;
        leagueLoaded = false;
        currentLeagueFile = null;
        enterScoresChanged = false;
    } //ends constructor
    
    //method to enable buttons when a league is loaded or created for editing and saving
    //the league information.
    private void enableMenuItems() {
        editEditBowler.setEnabled(true);
        editEditTeam.setEnabled(true);
        fileSaveAs.setEnabled(true);
        if(!hasBeenSaved) {
            fileSave.setEnabled(true);
        } else {
            fileSave.setEnabled(false);
        } //ends if-else
    } //ends enableMenuButtons

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        editBowlerPanel = new javax.swing.JTabbedPane();
        homePanel = new javax.swing.JPanel();
        homeLabel1 = new javax.swing.JLabel();
        newLeaguePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        newLeagueNameText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        newLeagueNumTeamsText = new javax.swing.JTextField();
        newLeagueNumBowlersText = new javax.swing.JTextField();
        createLeagueButton = new javax.swing.JButton();
        cancelLeagueButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        newLeagueNumWeeksText = new javax.swing.JTextField();
        editTeamPanel = new javax.swing.JPanel();
        teamComboBox = new javax.swing.JComboBox();
        saveTeamChangesButton = new javax.swing.JButton();
        cancelTeamChangesButton = new javax.swing.JButton();
        editTeamBowlersPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        editTeamBowlerName1 = new javax.swing.JTextField();
        editTeamAverage1 = new javax.swing.JTextField();
        editTeamBowlerName2 = new javax.swing.JTextField();
        editTeamAverage2 = new javax.swing.JTextField();
        editTeamBowlerName3 = new javax.swing.JTextField();
        editTeamAverage3 = new javax.swing.JTextField();
        editTeamBowlerName4 = new javax.swing.JTextField();
        editTeamAverage4 = new javax.swing.JTextField();
        editTeamBowlerName5 = new javax.swing.JTextField();
        editTeamAverage5 = new javax.swing.JTextField();
        editTeamBowlerName6 = new javax.swing.JTextField();
        editTeamAverage6 = new javax.swing.JTextField();
        moveBowlerDown1 = new javax.swing.JButton();
        moveBowlerUp2 = new javax.swing.JButton();
        moveBowlerDown2 = new javax.swing.JButton();
        moveBowlerUp3 = new javax.swing.JButton();
        moveBowlerDown3 = new javax.swing.JButton();
        moveBowlerUp4 = new javax.swing.JButton();
        moveBowlerDown4 = new javax.swing.JButton();
        moveBowlerUp5 = new javax.swing.JButton();
        moveBowlerDown5 = new javax.swing.JButton();
        moveBowlerUp6 = new javax.swing.JButton();
        moveBowlerDown6 = new javax.swing.JButton();
        moveBowlerUp1 = new javax.swing.JButton();
        editTeamTeamPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        editTeamNameText = new javax.swing.JTextField();
        finalizeTeamChangesButton = new javax.swing.JButton();
        viewBowlerPanel = new javax.swing.JPanel();
        alphabeticButton = new javax.swing.JRadioButton();
        averageButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewBowlerTextArea = new javax.swing.JTextArea();
        viewBowlerExportButton = new javax.swing.JButton();
        viewMatchupPanel = new javax.swing.JPanel();
        viewMatchWeekCombo = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        viewMatchTeam0 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        viewMatchTeam1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        viewMatchTeam2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        viewMatchTeam3 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        viewMatchTeam4 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        viewMatchTeam5 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        viewMatchTeam6 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        viewMatchTeam7 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        viewMatchTeam8 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        viewMatchTeam9 = new javax.swing.JLabel();
        viewMatchupExportButton = new javax.swing.JButton();
        enterScoresPanel = new javax.swing.JPanel();
        enterScoreWeekCombo = new javax.swing.JComboBox();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        enterScoreBowlerLabel1 = new javax.swing.JLabel();
        enterScoreBowlerLabel2 = new javax.swing.JLabel();
        enterScoreBowlerLabel3 = new javax.swing.JLabel();
        enterScoreBowlerLabel4 = new javax.swing.JLabel();
        enterScoreBowlerLabel5 = new javax.swing.JLabel();
        enterScoreBowlerLabel6 = new javax.swing.JLabel();
        enterScoreGame1Bowler1 = new javax.swing.JTextField();
        enterScoreGame1Bowler2 = new javax.swing.JTextField();
        enterScoreGame1Bowler3 = new javax.swing.JTextField();
        enterScoreGame1Bowler4 = new javax.swing.JTextField();
        enterScoreGame1Bowler5 = new javax.swing.JTextField();
        enterScoreGame1Bowler6 = new javax.swing.JTextField();
        enterScoreGame2Bowler1 = new javax.swing.JTextField();
        enterScoreGame2Bowler2 = new javax.swing.JTextField();
        enterScoreGame2Bowler3 = new javax.swing.JTextField();
        enterScoreGame2Bowler4 = new javax.swing.JTextField();
        enterScoreGame2Bowler5 = new javax.swing.JTextField();
        enterScoreGame2Bowler6 = new javax.swing.JTextField();
        enterScoreGame3Bowler1 = new javax.swing.JTextField();
        enterScoreGame3Bowler2 = new javax.swing.JTextField();
        enterScoreGame3Bowler3 = new javax.swing.JTextField();
        enterScoreGame3Bowler4 = new javax.swing.JTextField();
        enterScoreGame3Bowler5 = new javax.swing.JTextField();
        enterScoreGame3Bowler6 = new javax.swing.JTextField();
        enterScoreTeamLabel = new javax.swing.JLabel();
        enterScoreLaneCombo = new javax.swing.JComboBox();
        enterScorePrevLaneButton = new javax.swing.JButton();
        enterScoreNextLaneButton = new javax.swing.JButton();
        enterScoreFinaliazeButton = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        enterScoreSaveChanges = new javax.swing.JButton();
        editBowlerTab = new javax.swing.JPanel();
        editBowlerSelectTeamCombo = new javax.swing.JComboBox();
        editBowlerSelectBowlerCombo = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        editBowlerNameText = new javax.swing.JTextField();
        editBowlerNewBowlerCheckbox = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        editBowlerAvgText = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        editBowlerPrevAvgText = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        editBowlerPlayedText = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        editBowlerAbsentText = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        editBowlerRolloffText = new javax.swing.JTextField();
        jSeparator7 = new javax.swing.JSeparator();
        editBowlerWeekCombo = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        editBowlerGame1Text = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        editBowlerGame2Text = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        editBowlerGame3Text = new javax.swing.JTextField();
        editBowlerSaveButton = new javax.swing.JButton();
        editBowlerCancelButton = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        editBowlerHdcpText = new javax.swing.JTextField();
        editBowlerDeleteButton = new javax.swing.JButton();
        viewTeamStatsTab = new javax.swing.JPanel();
        sortByTeamIDButton = new javax.swing.JRadioButton();
        sortByNameButton = new javax.swing.JRadioButton();
        sortByStandingButton = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewTeamStatsTextArea = new javax.swing.JTextArea();
        viewTeamsExportButton = new javax.swing.JButton();
        endOfYearTab = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        endOfYearTextArea = new javax.swing.JTextArea();
        endOfYearExportButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileNew = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        fileOpen = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        fileSave = new javax.swing.JMenuItem();
        fileSaveAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        fileExit = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        editEditTeam = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        editEditBowler = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bowling League Manager");

        editBowlerPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                editBowlerPanelStateChanged(evt);
            }
        });

        homeLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        homeLabel1.setText("Welcome to Bowling League Manager");

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(homeLabel1)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(homeLabel1)
                .addContainerGap(299, Short.MAX_VALUE))
        );

        editBowlerPanel.addTab("Home", homePanel);

        newLeaguePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Create New League"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("League Name:");

        newLeagueNameText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newLeagueNameText.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Number Of Teams:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Bowlers Per Team:");

        newLeagueNumTeamsText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        newLeagueNumBowlersText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        createLeagueButton.setText("Create League");
        createLeagueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createLeagueButtonActionPerformed(evt);
            }
        });

        cancelLeagueButton.setText("Cancel");
        cancelLeagueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelLeagueButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Number of Weeks:");

        newLeagueNumWeeksText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout newLeaguePanelLayout = new javax.swing.GroupLayout(newLeaguePanel);
        newLeaguePanel.setLayout(newLeaguePanelLayout);
        newLeaguePanelLayout.setHorizontalGroup(
            newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newLeaguePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newLeagueNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newLeagueNumTeamsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(newLeaguePanelLayout.createSequentialGroup()
                        .addComponent(createLeagueButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelLeagueButton))
                    .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(newLeagueNumWeeksText, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(newLeagueNumBowlersText, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap())
        );

        newLeaguePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {newLeagueNameText, newLeagueNumBowlersText, newLeagueNumTeamsText});

        newLeaguePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelLeagueButton, createLeagueButton});

        newLeaguePanelLayout.setVerticalGroup(
            newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newLeaguePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(newLeagueNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(newLeagueNumTeamsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(newLeagueNumBowlersText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newLeagueNumWeeksText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                .addGroup(newLeaguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelLeagueButton)
                    .addComponent(createLeagueButton))
                .addContainerGap())
        );

        editBowlerPanel.addTab("New League", newLeaguePanel);

        editTeamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Team"));

        teamComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select a team..." }));
        teamComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                teamComboBoxItemStateChanged(evt);
            }
        });

        saveTeamChangesButton.setText("Save Changes");
        saveTeamChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTeamChangesButtonActionPerformed(evt);
            }
        });

        cancelTeamChangesButton.setText("Cancel");
        cancelTeamChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTeamChangesButtonActionPerformed(evt);
            }
        });

        editTeamBowlersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bowlers"));

        jLabel4.setText("Name");

        jLabel5.setText("Average");

        editTeamBowlerName1.setEnabled(false);
        editTeamBowlerName1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamBowlerName1FocusGained(evt);
            }
        });

        editTeamAverage1.setEnabled(false);
        editTeamAverage1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamAverage1FocusGained(evt);
            }
        });

        editTeamBowlerName2.setEnabled(false);
        editTeamBowlerName2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamBowlerName2FocusGained(evt);
            }
        });

        editTeamAverage2.setEnabled(false);
        editTeamAverage2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamAverage2FocusGained(evt);
            }
        });

        editTeamBowlerName3.setEnabled(false);
        editTeamBowlerName3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamBowlerName3FocusGained(evt);
            }
        });

        editTeamAverage3.setEnabled(false);
        editTeamAverage3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamAverage3FocusGained(evt);
            }
        });

        editTeamBowlerName4.setEnabled(false);
        editTeamBowlerName4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamBowlerName4FocusGained(evt);
            }
        });

        editTeamAverage4.setEnabled(false);
        editTeamAverage4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamAverage4FocusGained(evt);
            }
        });

        editTeamBowlerName5.setEnabled(false);
        editTeamBowlerName5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamBowlerName5FocusGained(evt);
            }
        });

        editTeamAverage5.setEnabled(false);
        editTeamAverage5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamAverage5FocusGained(evt);
            }
        });

        editTeamBowlerName6.setEnabled(false);
        editTeamBowlerName6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamBowlerName6FocusGained(evt);
            }
        });

        editTeamAverage6.setEnabled(false);
        editTeamAverage6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamAverage6FocusGained(evt);
            }
        });

        moveBowlerDown1.setText("v");
        moveBowlerDown1.setEnabled(false);
        moveBowlerDown1.setFocusable(false);
        moveBowlerDown1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerDown1ActionPerformed(evt);
            }
        });

        moveBowlerUp2.setText("^");
        moveBowlerUp2.setEnabled(false);
        moveBowlerUp2.setFocusable(false);
        moveBowlerUp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerUp2ActionPerformed(evt);
            }
        });

        moveBowlerDown2.setText("v");
        moveBowlerDown2.setEnabled(false);
        moveBowlerDown2.setFocusable(false);
        moveBowlerDown2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerDown2ActionPerformed(evt);
            }
        });

        moveBowlerUp3.setText("^");
        moveBowlerUp3.setEnabled(false);
        moveBowlerUp3.setFocusable(false);
        moveBowlerUp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerUp3ActionPerformed(evt);
            }
        });

        moveBowlerDown3.setText("v");
        moveBowlerDown3.setEnabled(false);
        moveBowlerDown3.setFocusable(false);
        moveBowlerDown3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerDown3ActionPerformed(evt);
            }
        });

        moveBowlerUp4.setText("^");
        moveBowlerUp4.setEnabled(false);
        moveBowlerUp4.setFocusable(false);
        moveBowlerUp4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerUp4ActionPerformed(evt);
            }
        });

        moveBowlerDown4.setText("v");
        moveBowlerDown4.setEnabled(false);
        moveBowlerDown4.setFocusable(false);
        moveBowlerDown4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerDown4ActionPerformed(evt);
            }
        });

        moveBowlerUp5.setText("^");
        moveBowlerUp5.setEnabled(false);
        moveBowlerUp5.setFocusable(false);
        moveBowlerUp5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerUp5ActionPerformed(evt);
            }
        });

        moveBowlerDown5.setText("v");
        moveBowlerDown5.setEnabled(false);
        moveBowlerDown5.setFocusable(false);
        moveBowlerDown5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerDown5ActionPerformed(evt);
            }
        });

        moveBowlerUp6.setText("^");
        moveBowlerUp6.setEnabled(false);
        moveBowlerUp6.setFocusable(false);
        moveBowlerUp6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerUp6ActionPerformed(evt);
            }
        });

        moveBowlerDown6.setText("v");
        moveBowlerDown6.setEnabled(false);
        moveBowlerDown6.setFocusable(false);
        moveBowlerDown6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerDown6ActionPerformed(evt);
            }
        });

        moveBowlerUp1.setText("^");
        moveBowlerUp1.setEnabled(false);
        moveBowlerUp1.setFocusable(false);
        moveBowlerUp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBowlerUp1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editTeamBowlersPanelLayout = new javax.swing.GroupLayout(editTeamBowlersPanel);
        editTeamBowlersPanel.setLayout(editTeamBowlersPanelLayout);
        editTeamBowlersPanelLayout.setHorizontalGroup(
            editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                        .addComponent(editTeamBowlerName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveBowlerUp2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                        .addComponent(editTeamBowlerName3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveBowlerUp3, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                        .addComponent(editTeamBowlerName4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveBowlerUp4, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                        .addComponent(editTeamBowlerName5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveBowlerUp5, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                        .addComponent(editTeamBowlerName6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveBowlerUp6, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                        .addComponent(editTeamBowlerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveBowlerUp1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(moveBowlerDown5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveBowlerDown4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveBowlerDown3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveBowlerDown2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveBowlerDown1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveBowlerDown6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(editTeamAverage5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editTeamAverage4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editTeamAverage3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editTeamAverage2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editTeamAverage1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editTeamAverage6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        editTeamBowlersPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {editTeamBowlerName1, editTeamBowlerName2, editTeamBowlerName3, editTeamBowlerName4, editTeamBowlerName5, editTeamBowlerName6});

        editTeamBowlersPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {moveBowlerUp1, moveBowlerUp2, moveBowlerUp3, moveBowlerUp4, moveBowlerUp5, moveBowlerUp6});

        editTeamBowlersPanelLayout.setVerticalGroup(
            editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTeamBowlersPanelLayout.createSequentialGroup()
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTeamBowlerName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTeamAverage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerDown1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerUp1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTeamBowlerName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTeamAverage2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerUp2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerDown2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTeamBowlerName3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTeamAverage3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerUp3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerDown3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTeamBowlerName4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTeamAverage4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerUp4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerDown4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTeamBowlerName5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTeamAverage5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerUp5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerDown5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamBowlersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTeamBowlerName6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTeamAverage6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerUp6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveBowlerDown6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        editTeamTeamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Team"));

        jLabel6.setText("Team Name");

        editTeamNameText.setEnabled(false);
        editTeamNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editTeamNameTextFocusGained(evt);
            }
        });

        javax.swing.GroupLayout editTeamTeamPanelLayout = new javax.swing.GroupLayout(editTeamTeamPanel);
        editTeamTeamPanel.setLayout(editTeamTeamPanelLayout);
        editTeamTeamPanelLayout.setHorizontalGroup(
            editTeamTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editTeamTeamPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editTeamTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(editTeamNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        editTeamTeamPanelLayout.setVerticalGroup(
            editTeamTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTeamTeamPanelLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editTeamNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        finalizeTeamChangesButton.setText("Finalize Teams");
        finalizeTeamChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeTeamChangesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editTeamPanelLayout = new javax.swing.GroupLayout(editTeamPanel);
        editTeamPanel.setLayout(editTeamPanelLayout);
        editTeamPanelLayout.setHorizontalGroup(
            editTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTeamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(editTeamPanelLayout.createSequentialGroup()
                        .addGroup(editTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(finalizeTeamChangesButton)
                            .addComponent(editTeamTeamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editTeamBowlersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(editTeamPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(saveTeamChangesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelTeamChangesButton)))))
                .addContainerGap())
        );
        editTeamPanelLayout.setVerticalGroup(
            editTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTeamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(teamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editTeamTeamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editTeamBowlersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(editTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTeamChangesButton)
                    .addComponent(cancelTeamChangesButton)
                    .addComponent(finalizeTeamChangesButton)))
        );

        editBowlerPanel.addTab("Edit Team", editTeamPanel);

        buttonGroup1.add(alphabeticButton);
        alphabeticButton.setText("Sort By Name");
        alphabeticButton.setEnabled(false);
        alphabeticButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphabeticButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(averageButton);
        averageButton.setText("Sort By Average");
        averageButton.setEnabled(false);
        averageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averageButtonActionPerformed(evt);
            }
        });

        viewBowlerTextArea.setColumns(20);
        viewBowlerTextArea.setRows(5);
        jScrollPane1.setViewportView(viewBowlerTextArea);

        viewBowlerExportButton.setText("Export");
        viewBowlerExportButton.setEnabled(false);
        viewBowlerExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBowlerExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewBowlerPanelLayout = new javax.swing.GroupLayout(viewBowlerPanel);
        viewBowlerPanel.setLayout(viewBowlerPanelLayout);
        viewBowlerPanelLayout.setHorizontalGroup(
            viewBowlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewBowlerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewBowlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(viewBowlerPanelLayout.createSequentialGroup()
                        .addComponent(alphabeticButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(averageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                        .addComponent(viewBowlerExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        viewBowlerPanelLayout.setVerticalGroup(
            viewBowlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewBowlerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewBowlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alphabeticButton)
                    .addComponent(averageButton)
                    .addComponent(viewBowlerExportButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );

        editBowlerPanel.addTab("View Bowlers", viewBowlerPanel);

        viewMatchWeekCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        viewMatchWeekCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMatchWeekComboActionPerformed(evt);
            }
        });

        jLabel7.setText("Lane");

        jLabel8.setText("Team");

        jLabel9.setText("7");

        jLabel11.setText("8");

        jLabel13.setText("9");

        jLabel15.setText("10");

        jLabel17.setText("11");

        jLabel19.setText("12");

        jLabel21.setText("13");

        jLabel23.setText("14");

        jLabel25.setText("15");

        jLabel27.setText("16");

        viewMatchupExportButton.setText("Export");
        viewMatchupExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMatchupExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewMatchupPanelLayout = new javax.swing.GroupLayout(viewMatchupPanel);
        viewMatchupPanel.setLayout(viewMatchupPanelLayout);
        viewMatchupPanelLayout.setHorizontalGroup(
            viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewMatchupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(viewMatchWeekCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(viewMatchupPanelLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewMatchupPanelLayout.createSequentialGroup()
                                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewMatchTeam1)
                                    .addComponent(viewMatchTeam0, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(viewMatchTeam2)
                                    .addComponent(viewMatchTeam3)
                                    .addComponent(viewMatchTeam4)
                                    .addComponent(viewMatchTeam5)
                                    .addComponent(viewMatchTeam6)
                                    .addComponent(viewMatchTeam7)
                                    .addComponent(viewMatchTeam8)
                                    .addComponent(viewMatchTeam9))))
                        .addComponent(jLabel13)
                        .addComponent(jLabel15)
                        .addComponent(jLabel17)
                        .addComponent(jLabel19)
                        .addComponent(jLabel21)
                        .addComponent(jLabel23)
                        .addComponent(jLabel25)
                        .addComponent(jLabel27)))
                .addContainerGap(309, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewMatchupPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewMatchupExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        viewMatchupPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel8, viewMatchTeam0, viewMatchTeam1, viewMatchTeam2, viewMatchTeam3, viewMatchTeam4, viewMatchTeam5, viewMatchTeam6, viewMatchTeam7, viewMatchTeam8, viewMatchTeam9});

        viewMatchupPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel11, jLabel13, jLabel15, jLabel17, jLabel19, jLabel21, jLabel23, jLabel25, jLabel27, jLabel7, jLabel9});

        viewMatchupPanelLayout.setVerticalGroup(
            viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewMatchupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewMatchWeekCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(viewMatchTeam0))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(viewMatchTeam1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(viewMatchTeam2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(viewMatchTeam3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(viewMatchTeam4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(viewMatchTeam5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(viewMatchTeam6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(viewMatchTeam7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(viewMatchTeam8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMatchupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(viewMatchTeam9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewMatchupExportButton)
                .addContainerGap())
        );

        editBowlerPanel.addTab("View Matchups", viewMatchupPanel);

        enterScoreWeekCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        enterScoreWeekCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterScoreWeekComboActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Bowler");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Game 1");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Game 2");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Game 3");

        enterScoreBowlerLabel1.setText(" ");

        enterScoreBowlerLabel2.setText(" ");

        enterScoreBowlerLabel3.setText(" ");

        enterScoreBowlerLabel4.setText(" ");
        enterScoreBowlerLabel4.setToolTipText("");

        enterScoreBowlerLabel5.setText(" ");

        enterScoreBowlerLabel6.setText(" ");

        enterScoreGame1Bowler1.setEnabled(false);
        enterScoreGame1Bowler1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame1Bowler2.setEnabled(false);
        enterScoreGame1Bowler2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame1Bowler3.setEnabled(false);
        enterScoreGame1Bowler3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame1Bowler4.setEnabled(false);
        enterScoreGame1Bowler4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame1Bowler5.setEnabled(false);
        enterScoreGame1Bowler5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame1Bowler6.setEnabled(false);
        enterScoreGame1Bowler6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame2Bowler1.setEnabled(false);
        enterScoreGame2Bowler1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame2Bowler2.setEnabled(false);
        enterScoreGame2Bowler2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame2Bowler3.setEnabled(false);
        enterScoreGame2Bowler3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame2Bowler4.setEnabled(false);
        enterScoreGame2Bowler4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame2Bowler5.setEnabled(false);
        enterScoreGame2Bowler5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame2Bowler6.setEnabled(false);
        enterScoreGame2Bowler6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame3Bowler1.setEnabled(false);
        enterScoreGame3Bowler1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame3Bowler2.setEnabled(false);
        enterScoreGame3Bowler2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame3Bowler3.setEnabled(false);
        enterScoreGame3Bowler3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame3Bowler4.setEnabled(false);
        enterScoreGame3Bowler4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame3Bowler5.setEnabled(false);
        enterScoreGame3Bowler5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreGame3Bowler6.setEnabled(false);
        enterScoreGame3Bowler6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectText(evt);
            }
        });

        enterScoreTeamLabel.setText("Team: ");

        enterScoreLaneCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        enterScoreLaneCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterScoreLaneComboActionPerformed(evt);
            }
        });

        enterScorePrevLaneButton.setText("Previous Lane");
        enterScorePrevLaneButton.setEnabled(false);
        enterScorePrevLaneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterScorePrevLaneButtonActionPerformed(evt);
            }
        });

        enterScoreNextLaneButton.setText("Next Lane");
        enterScoreNextLaneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterScoreNextLaneButtonActionPerformed(evt);
            }
        });

        enterScoreFinaliazeButton.setText("Finalize Week");
        enterScoreFinaliazeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterScoreFinaliazeButtonActionPerformed(evt);
            }
        });

        jLabel20.setText("Ex: 200, 200A, 200R");
        jLabel20.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        enterScoreSaveChanges.setText("Save Changes");
        enterScoreSaveChanges.setFocusable(false);
        enterScoreSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterScoreSaveChangesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout enterScoresPanelLayout = new javax.swing.GroupLayout(enterScoresPanel);
        enterScoresPanel.setLayout(enterScoresPanelLayout);
        enterScoresPanelLayout.setHorizontalGroup(
            enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator6)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, enterScoresPanelLayout.createSequentialGroup()
                        .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                .addComponent(enterScoreLaneCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(enterScoreTeamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, enterScoresPanelLayout.createSequentialGroup()
                                        .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(enterScoreWeekCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                                .addComponent(enterScoreBowlerLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(enterScoreGame1Bowler2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                                .addComponent(enterScoreBowlerLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(enterScoreGame1Bowler3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                                .addComponent(enterScoreBowlerLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(enterScoreGame1Bowler4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                                .addComponent(enterScoreBowlerLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(enterScoreGame1Bowler5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                                .addComponent(enterScoreBowlerLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(enterScoreGame1Bowler6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18))
                                    .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                        .addComponent(enterScoreBowlerLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(enterScoreGame1Bowler1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)))
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(enterScoreGame3Bowler1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(31, 31, 31)
                        .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enterScoreFinaliazeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enterScorePrevLaneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enterScoreNextLaneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(enterScoreSaveChanges, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        enterScoresPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {enterScoreGame1Bowler1, enterScoreGame1Bowler2, enterScoreGame1Bowler3, enterScoreGame1Bowler4, enterScoreGame1Bowler5, enterScoreGame1Bowler6, enterScoreGame2Bowler1, enterScoreGame2Bowler2, enterScoreGame2Bowler3, enterScoreGame2Bowler4, enterScoreGame2Bowler5, enterScoreGame2Bowler6, enterScoreGame3Bowler1, enterScoreGame3Bowler2, enterScoreGame3Bowler3, enterScoreGame3Bowler4, enterScoreGame3Bowler5, enterScoreGame3Bowler6});

        enterScoresPanelLayout.setVerticalGroup(
            enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enterScoreWeekCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterScoreTeamLabel)
                    .addComponent(enterScoreLaneCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(enterScoresPanelLayout.createSequentialGroup()
                        .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enterScoreBowlerLabel1)
                                    .addComponent(enterScoreGame1Bowler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enterScoreBowlerLabel2)
                                    .addComponent(enterScoreGame1Bowler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enterScoreBowlerLabel3)
                                    .addComponent(enterScoreGame1Bowler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreSaveChanges))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enterScoreBowlerLabel4)
                                    .addComponent(enterScoreGame1Bowler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enterScoreBowlerLabel5)
                                    .addComponent(enterScoreGame1Bowler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame2Bowler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterScoreGame3Bowler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(enterScoresPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(enterScoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterScoreBowlerLabel6)
                            .addComponent(enterScoreGame1Bowler6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterScoreGame2Bowler6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterScoreGame3Bowler6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterScoreNextLaneButton)))
                    .addGroup(enterScoresPanelLayout.createSequentialGroup()
                        .addComponent(enterScorePrevLaneButton)
                        .addGap(29, 29, 29)))
                .addComponent(enterScoreFinaliazeButton)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        enterScoresPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {enterScoreGame1Bowler1, enterScoreGame1Bowler2, enterScoreGame1Bowler3, enterScoreGame1Bowler4, enterScoreGame1Bowler5, enterScoreGame1Bowler6, enterScoreGame2Bowler1, enterScoreGame2Bowler2, enterScoreGame2Bowler3, enterScoreGame2Bowler4, enterScoreGame2Bowler5, enterScoreGame2Bowler6, enterScoreGame3Bowler1, enterScoreGame3Bowler2, enterScoreGame3Bowler3, enterScoreGame3Bowler4, enterScoreGame3Bowler5, enterScoreGame3Bowler6});

        editBowlerPanel.addTab("Enter Scores", enterScoresPanel);

        editBowlerSelectTeamCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        editBowlerSelectTeamCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBowlerSelectTeamComboActionPerformed(evt);
            }
        });

        editBowlerSelectBowlerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        editBowlerSelectBowlerCombo.setEnabled(false);
        editBowlerSelectBowlerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBowlerSelectBowlerComboActionPerformed(evt);
            }
        });

        jLabel22.setText("Name:");

        editBowlerNameText.setEnabled(false);

        editBowlerNewBowlerCheckbox.setText("New Bowler");
        editBowlerNewBowlerCheckbox.setEnabled(false);

        jLabel24.setText("Average:");

        editBowlerAvgText.setEnabled(false);

        jLabel26.setText("Previous Avg:");

        editBowlerPrevAvgText.setEnabled(false);

        jLabel28.setText("Played:");

        editBowlerPlayedText.setEnabled(false);

        jLabel29.setText("Absent:");

        editBowlerAbsentText.setEnabled(false);

        jLabel30.setText("Rolloff:");

        editBowlerRolloffText.setEnabled(false);

        editBowlerWeekCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        editBowlerWeekCombo.setEnabled(false);
        editBowlerWeekCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBowlerWeekComboActionPerformed(evt);
            }
        });

        jLabel31.setText("Game 1:");

        editBowlerGame1Text.setEnabled(false);

        jLabel32.setText("Game 2:");

        editBowlerGame2Text.setEnabled(false);

        jLabel33.setText("Game 3:");

        editBowlerGame3Text.setEnabled(false);

        editBowlerSaveButton.setText("Save Changes");
        editBowlerSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBowlerSaveButtonActionPerformed(evt);
            }
        });

        editBowlerCancelButton.setText("Cancel");
        editBowlerCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBowlerCancelButtonActionPerformed(evt);
            }
        });

        jLabel34.setText("Handicap:");

        editBowlerHdcpText.setEnabled(false);

        editBowlerDeleteButton.setText("Delete Bowler");
        editBowlerDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBowlerDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editBowlerTabLayout = new javax.swing.GroupLayout(editBowlerTab);
        editBowlerTab.setLayout(editBowlerTabLayout);
        editBowlerTabLayout.setHorizontalGroup(
            editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editBowlerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator7)
                    .addGroup(editBowlerTabLayout.createSequentialGroup()
                        .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editBowlerTabLayout.createSequentialGroup()
                                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(editBowlerSelectTeamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(editBowlerTabLayout.createSequentialGroup()
                                        .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel24)
                                            .addComponent(jLabel22))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(editBowlerNameText)
                                            .addComponent(editBowlerAvgText))))
                                .addGap(18, 18, 18)
                                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editBowlerSelectBowlerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(editBowlerNewBowlerCheckbox)
                                    .addGroup(editBowlerTabLayout.createSequentialGroup()
                                        .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel26)
                                            .addGroup(editBowlerTabLayout.createSequentialGroup()
                                                .addGap(13, 13, 13)
                                                .addComponent(editBowlerAbsentText, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(editBowlerTabLayout.createSequentialGroup()
                                                .addComponent(jLabel30)
                                                .addGap(18, 18, 18)
                                                .addComponent(editBowlerRolloffText, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(editBowlerPrevAvgText)))))
                            .addGroup(editBowlerTabLayout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addGap(18, 18, 18)
                                .addComponent(editBowlerPlayedText, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel29))
                            .addGroup(editBowlerTabLayout.createSequentialGroup()
                                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editBowlerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel33)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editBowlerGame3Text))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editBowlerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editBowlerGame2Text))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editBowlerTabLayout.createSequentialGroup()
                                        .addComponent(jLabel31)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editBowlerGame1Text))
                                    .addComponent(editBowlerWeekCombo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editBowlerHdcpText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 132, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBowlerTabLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(editBowlerCancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editBowlerDeleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editBowlerSaveButton)))
                .addContainerGap())
        );
        editBowlerTabLayout.setVerticalGroup(
            editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editBowlerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBowlerSelectTeamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBowlerSelectBowlerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(editBowlerNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBowlerNewBowlerCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(editBowlerAvgText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(editBowlerPrevAvgText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(editBowlerPlayedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(editBowlerAbsentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(editBowlerRolloffText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editBowlerWeekCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(editBowlerGame1Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(editBowlerHdcpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(editBowlerGame2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(editBowlerGame3Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(editBowlerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBowlerSaveButton)
                    .addComponent(editBowlerCancelButton)
                    .addComponent(editBowlerDeleteButton))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        editBowlerPanel.addTab("Edit Bowler", editBowlerTab);

        buttonGroup2.add(sortByTeamIDButton);
        sortByTeamIDButton.setText("Sort By Team No.");
        sortByTeamIDButton.setEnabled(false);
        sortByTeamIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByTeamIDButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(sortByNameButton);
        sortByNameButton.setText("Sort By Team Name");
        sortByNameButton.setEnabled(false);
        sortByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByNameButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(sortByStandingButton);
        sortByStandingButton.setText("Sort By Standings");
        sortByStandingButton.setEnabled(false);
        sortByStandingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByStandingButtonActionPerformed(evt);
            }
        });

        viewTeamStatsTextArea.setEditable(false);
        viewTeamStatsTextArea.setColumns(20);
        viewTeamStatsTextArea.setRows(5);
        jScrollPane2.setViewportView(viewTeamStatsTextArea);

        viewTeamsExportButton.setText("Export");
        viewTeamsExportButton.setEnabled(false);
        viewTeamsExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTeamsExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewTeamStatsTabLayout = new javax.swing.GroupLayout(viewTeamStatsTab);
        viewTeamStatsTab.setLayout(viewTeamStatsTabLayout);
        viewTeamStatsTabLayout.setHorizontalGroup(
            viewTeamStatsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewTeamStatsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewTeamStatsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(viewTeamStatsTabLayout.createSequentialGroup()
                        .addComponent(sortByTeamIDButton)
                        .addGap(18, 18, 18)
                        .addComponent(sortByNameButton)
                        .addGap(18, 18, 18)
                        .addComponent(sortByStandingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewTeamsExportButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewTeamStatsTabLayout.setVerticalGroup(
            viewTeamStatsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewTeamStatsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewTeamStatsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortByTeamIDButton)
                    .addComponent(sortByNameButton)
                    .addComponent(sortByStandingButton)
                    .addComponent(viewTeamsExportButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );

        editBowlerPanel.addTab("View Team Stats", viewTeamStatsTab);

        endOfYearTextArea.setColumns(20);
        endOfYearTextArea.setRows(5);
        jScrollPane3.setViewportView(endOfYearTextArea);

        endOfYearExportButton.setText("Export");
        endOfYearExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endOfYearExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout endOfYearTabLayout = new javax.swing.GroupLayout(endOfYearTab);
        endOfYearTab.setLayout(endOfYearTabLayout);
        endOfYearTabLayout.setHorizontalGroup(
            endOfYearTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endOfYearTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(endOfYearTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addGroup(endOfYearTabLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(endOfYearExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        endOfYearTabLayout.setVerticalGroup(
            endOfYearTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endOfYearTabLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(endOfYearExportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        editBowlerPanel.addTab("End of Year Honors", endOfYearTab);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        fileMenu.setToolTipText("");

        fileNew.setMnemonic('N');
        fileNew.setText("New League...");
        fileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNewActionPerformed(evt);
            }
        });
        fileMenu.add(fileNew);
        fileMenu.add(jSeparator1);

        fileOpen.setMnemonic('O');
        fileOpen.setText("Open League...");
        fileOpen.setToolTipText("");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        fileMenu.add(fileOpen);
        fileMenu.add(jSeparator2);

        fileSave.setMnemonic('S');
        fileSave.setText("Save...");
        fileSave.setEnabled(false);
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        fileMenu.add(fileSave);

        fileSaveAs.setMnemonic('V');
        fileSaveAs.setText("Save As...");
        fileSaveAs.setEnabled(false);
        fileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveAsActionPerformed(evt);
            }
        });
        fileMenu.add(fileSaveAs);
        fileMenu.add(jSeparator3);

        fileExit.setMnemonic('X');
        fileExit.setText("Exit");
        fileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExitActionPerformed(evt);
            }
        });
        fileMenu.add(fileExit);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('E');
        editMenu.setText("Edit");

        editEditTeam.setMnemonic('T');
        editEditTeam.setText("Edit Team...");
        editEditTeam.setEnabled(false);
        editEditTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEditTeamActionPerformed(evt);
            }
        });
        editMenu.add(editEditTeam);
        editMenu.add(jSeparator4);

        editEditBowler.setMnemonic('B');
        editEditBowler.setText("Edit Bowler...");
        editEditBowler.setEnabled(false);
        editEditBowler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEditBowlerActionPerformed(evt);
            }
        });
        editMenu.add(editEditBowler);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editBowlerPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editBowlerPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //direct user to the edit team pane when the edit team menu item is selected.
    private void editEditTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEditTeamActionPerformed
        editBowlerPanel.setSelectedIndex(2);
    }//GEN-LAST:event_editEditTeamActionPerformed

    //exit the program
    private void fileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExitActionPerformed
        if(hasBeenSaved) {
            //exit the program
            System.exit(0);
        } else {
            int result = JOptionPane.showConfirmDialog(this, "League has unsaved changes. Do you wish to save before exiting?",
                                                       "Save Changes?", JOptionPane.YES_NO_CANCEL_OPTION);
            //if user wishes to save, click the save menu button
            if(result == JOptionPane.YES_OPTION) {
                fileSave.doClick();
                //exit program after save
                System.exit(0);
            //if user does not want to save exit
            } else if (result == JOptionPane.NO_OPTION) {
                System.exit(0);
            } //ends if-else            
        } //ends if-else
    }//GEN-LAST:event_fileExitActionPerformed

    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed
        //file chooser to choose league data to open, filtered to .dat
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Bowling Leagues", "dat");
            fileChooser.setFileFilter(filter);
            int result = fileChooser.showOpenDialog(this);           
            
            //if user chooses a file, open file
            if(result == JFileChooser.APPROVE_OPTION) {
                //create a File object with the selected path/file name
                File selectedFile = fileChooser.getSelectedFile();
                System.out.println(selectedFile.getPath());
                try {
                    //file input stream and object input stream for deserialization of league
                    FileInputStream inStream = new FileInputStream(selectedFile);
                    ObjectInputStream objectInputFile = new ObjectInputStream(inStream);
                    
                    //read the league object from file
                    league = (BowlingLeague) objectInputFile.readObject();
                    objectInputFile.close();
                    
                    //set flags
                    leagueLoaded = true;
                    hasBeenSaved = true;
                    enableMenuItems();
                    
                    //set the currentLeagueFile to the selected file
                    //used for File-Save purposes
                    currentLeagueFile = selectedFile;
                } catch(Exception exc) {
                    System.out.println("There was a problem with file.");
                    leagueLoaded = false;
                } //ends catch               
            
//debugging system printlns to show league info loaded correctly***********************************
                System.out.println(league.toString());
            
                //test data read in from the file
                for(int i = 0; i < league.getNumTeams(); i++){
                    BowlingTeam tempTeam = league.getTeam(i);
                    System.out.println(tempTeam.getName());
                    for(int j = 0; j < league.getNumBowlers(); j++){
                        Bowler tempBowler = tempTeam.getBowler(j);
                        System.out.println(tempBowler.getName() + " " + tempBowler.getAvg());
                    } //end inner for
                }//end outer for
//end debugging printlns*************************************************************************
            
                //select the first panel
                editBowlerPanel.setSelectedIndex(0);
            } //end if
            else {
                leagueLoaded = false;
            } //end else
    }//GEN-LAST:event_fileOpenActionPerformed

    private void fileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveAsActionPerformed
        //file chooser to choose where to save the league data, filtered to .dat
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Bowling Leagues", "dat");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showSaveDialog(this);           
            
        //if user chooses save, write file
        if(result == JFileChooser.APPROVE_OPTION) {
            //create a file with the selected path/file name
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println(selectedFile.getPath());
            try {
                //file output stream and object output stream for serialization of league
                FileOutputStream outStream = new FileOutputStream(selectedFile);
                ObjectOutputStream objectOutputFile = new ObjectOutputStream(outStream);
                    
                //write the league object
                objectOutputFile.writeObject(league);
                objectOutputFile.close();
                
                //set flags and enable/disable buttons
                hasBeenSaved = true;
                leagueLoaded = true;
                enableMenuItems();
                
                //set the current file to the file selected
                currentLeagueFile = selectedFile;
            } catch(Exception exc) {
                System.out.println("There was a problem with file.");
            } //ends catch               
        } //end if
    }//GEN-LAST:event_fileSaveAsActionPerformed

    private void fileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNewActionPerformed
        //show the new league panel
        //newLeaguePanel.setVisible(true);
        editBowlerPanel.setSelectedComponent(newLeaguePanel);
    }//GEN-LAST:event_fileNewActionPerformed

    private void addDocumentFilters() {
        for(int i = 0; i < enterScoreGame1.length; i++) {
            AbstractDocument doc = (AbstractDocument)enterScoreGame1[i].getDocument();
            doc.setDocumentFilter(new DocumentScoreFilter());
            doc = (AbstractDocument)enterScoreGame2[i].getDocument();
            doc.setDocumentFilter(new DocumentScoreFilter());
            doc = (AbstractDocument)enterScoreGame3[i].getDocument();
            doc.setDocumentFilter(new DocumentScoreFilter());
        } //ends for loop        
    } //ends addDocumentFilters
    
    private void addDocumentListeners() {
        for(int i = 0; i < enterScoreGame1.length; i++) {
            enterScoreGame1[i].getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            private void updateLabel(DocumentEvent e) {
                enterScoresChanged = true;
            }
        });
            
            enterScoreGame2[i].getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            private void updateLabel(DocumentEvent e) {
                enterScoresChanged = true;
            }
            });
            
            enterScoreGame3[i].getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateLabel(e);
            }
            private void updateLabel(DocumentEvent e) {
                enterScoresChanged = true;
            }
        });
        } //ends for loop
    }
    
    //function to update the combo box model for team editing
    private void setEditTeamComboBoxModel() {
        DefaultComboBoxModel teamModel = new DefaultComboBoxModel();
        teamModel.addElement("Select team...");
        //load combo box model with team names
        for(int i = 0; i < league.getNumTeams(); i++) {
            BowlingTeam temp = league.getTeam(i);
            teamModel.addElement(temp.getName());
        } //ends for loop
        teamComboBox.setModel(teamModel);
    } //ends setEditTeamComboBoxModel
    
    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        //save the current league information to the currentLeagueFile
        if(currentLeagueFile != null) {
            try {
                //file output stream and object output stream for serialization of league
                FileOutputStream outStream = new FileOutputStream(currentLeagueFile);
                ObjectOutputStream objectOutputFile = new ObjectOutputStream(outStream);
                    
                //write the league object
                objectOutputFile.writeObject(league);
                objectOutputFile.close();
                hasBeenSaved = true;
                enableMenuItems();
            } catch(Exception exc) {
                System.out.println("There was a problem with file.");
            } //ends catch
        } else {
            fileSaveAs.doClick();
        } //ends if-else
    }//GEN-LAST:event_fileSaveActionPerformed

    //updates the fields on the enter score tab with the information from the team on the selected lane
    private void fillEnterScoreFields() {
        int weekIndex = enterScoreWeekCombo.getSelectedIndex();
        int laneIndex = enterScoreLaneCombo.getSelectedIndex();
        Matchup[] matchup;
        if((league.getNumTeams() < (league.getNumWeeks()/2)) && (weekIndex == (league.getNumWeeks()/2) || weekIndex == league.getNumWeeks())) {
            matchup = getPositionRound();
            league.setMatchupsForWeek(matchup, weekIndex);
        } else {
            matchup = league.getMatchupsForWeek(weekIndex);
        }
        
        //get the team on the select lane
        enterScoreCurrentTeam = league.getTeam(0);
        if((laneIndex % 2) == 0) {
            enterScoreCurrentTeam = league.getTeam(matchup[(laneIndex/2)].getTeam1());                
        } else if((laneIndex % 2) == 1) {
            enterScoreCurrentTeam = league.getTeam(matchup[(laneIndex/2)].getTeam2());
        } //ends if else
        enterScoreTeamLabel.setText(enterScoreCurrentTeam.getName());
        
        //fill fields with information
        for(int i = 0; i < league.getNumBowlers(); i++) {
            Bowler currentBowler = enterScoreCurrentTeam.getBowler(i);
            enterScoreBowlers[i].setText(currentBowler.getName());
            if(currentBowler.getScore(weekIndex-1, 0) == null) {
                enterScoreGame1[i].setText("999");
                enterScoresChanged = false;
            } else {
                enterScoreGame1[i].setText(currentBowler.getScore(weekIndex-1, 0).toString());
                enterScoresChanged = false;
            }
            
            if(currentBowler.getScore(weekIndex-1, 1) == null) {
                enterScoreGame2[i].setText("999");
                enterScoresChanged = false;
            } else {
                enterScoreGame2[i].setText(currentBowler.getScore(weekIndex-1, 1).toString());
                enterScoresChanged = false;
            }
            if(currentBowler.getScore(weekIndex-1, 2) == null) {
                enterScoreGame3[i].setText("999");
                enterScoresChanged = false;
            } else {
                enterScoreGame3[i].setText(currentBowler.getScore(weekIndex-1, 2).toString());
                enterScoresChanged = false;
            }
        } //ends for loop
        
        enterScoreGame1[0].requestFocusInWindow();
    } //ends fillEnterScoreFields
    
    private void editEditBowlerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEditBowlerActionPerformed
        editBowlerPanel.setSelectedIndex(6);
    }//GEN-LAST:event_editEditBowlerActionPerformed

    private void editBowlerPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_editBowlerPanelStateChanged
        //determine if the state change comes from the tab pane
        if (evt.getSource() instanceof JTabbedPane) {
            JTabbedPane pane = (JTabbedPane) evt.getSource();
            if(pane.getSelectedIndex() == 1) {
                JRootPane newLeagueRoot = SwingUtilities.getRootPane(createLeagueButton);
                newLeagueRoot.setDefaultButton(createLeagueButton);
            } else if(pane.getSelectedIndex() == 2 && leagueLoaded == true) {
                //determine if edit team pane is selected and if there is a team to get information from
                setEditTeamComboBoxModel();

                //store the text fields in arrays
                editTeamBowlers = new JTextField[6];
                editTeamBowlers[0] = editTeamBowlerName1;
                editTeamBowlers[1] = editTeamBowlerName2;
                editTeamBowlers[2] = editTeamBowlerName3;
                editTeamBowlers[3] = editTeamBowlerName4;
                editTeamBowlers[4] = editTeamBowlerName5;
                editTeamBowlers[5] = editTeamBowlerName6;

                editTeamAverages = new JTextField[6];
                editTeamAverages[0] = editTeamAverage1;
                editTeamAverages[1] = editTeamAverage2;
                editTeamAverages[2] = editTeamAverage3;
                editTeamAverages[3] = editTeamAverage4;
                editTeamAverages[4] = editTeamAverage5;
                editTeamAverages[5] = editTeamAverage6;
                
                //reset and disable fields upon first entering tab
                editTeamNameText.setText("");
                editTeamNameText.setEnabled(false);
                for(int i = 0; i < editTeamBowlers.length; i++) {
                    editTeamBowlers[i].setText("");
                    editTeamBowlers[i].setEnabled(false);
                    editTeamAverages[i].setText("");
                    editTeamAverages[i].setEnabled(false);
                } //ends for loop

                //store the buttons in arrays for further manipulation
                moveBowlersUp = new JButton[6];
                moveBowlersUp[0] = moveBowlerUp1;
                moveBowlersUp[1] = moveBowlerUp2;
                moveBowlersUp[2] = moveBowlerUp3;
                moveBowlersUp[3] = moveBowlerUp4;
                moveBowlersUp[4] = moveBowlerUp5;
                moveBowlersUp[5] = moveBowlerUp6;

                moveBowlersDown = new JButton[6];
                moveBowlersDown[0] = moveBowlerDown1;
                moveBowlersDown[1] = moveBowlerDown2;
                moveBowlersDown[2] = moveBowlerDown3;
                moveBowlersDown[3] = moveBowlerDown4;
                moveBowlersDown[4] = moveBowlerDown5;
                moveBowlersDown[5] = moveBowlerDown6;

                //determine if view bowler pane is selected
            } else if(pane.getSelectedIndex() == 3 && leagueLoaded == true) {
                alphabeticButton.setEnabled(true);
                averageButton.setEnabled(true);
                viewBowlerExportButton.setEnabled(true);
                //select the alphabetic radio button
                alphabeticButton.doClick();

                //create an alphabetic linked list
                LinkedList ll = new LinkedList(true);
                //load the list with bowlers
                for(int i = 0; i < league.getNumTeams(); i++) {
                    for(int j = 0; j < league.getNumBowlers(); j++) {
                        ll.add(league.getTeam(i).getBowler(j));
                    } //ends inner for
                } //ends outer for

                System.out.println("\nAlphabetic list:\n");
                Node head = ll.getHead();
                for(int i = 0; i < ll.size(); i++) {
                    System.out.println("Name " + head.getBowler().getName() + "  Avg: " +
                        head.getBowler().getAvg());
                    head = head.getNext();
                }//end for loop

                System.out.println("\nList based on average:\n");

                //create an average based linked list
                ll = new LinkedList(false);
                //load the list with bowlers
                for(int i = 0; i < league.getNumTeams(); i++) {
                    for(int j = 0; j < league.getNumBowlers(); j++) {
                        ll.add(league.getTeam(i).getBowler(j));
                    } //ends inner for
                } //ends outer for

                head = ll.getHead();
                for(int i = 0; i < ll.size(); i++) {
                    System.out.println("Name " + head.getBowler().getName() + "  Avg: " +
                        head.getBowler().getAvg());
                    head = head.getNext();
                }//end for loop
                //determine if view matchup panel is selected
            } else if(pane.getSelectedIndex() == 4 && leagueLoaded == true) {
                //string array to set up the combo box model
                String weekCombo[] = new String[league.getNumWeeks() + 1];
                weekCombo[0] = "Select week...";
                for(int i = 1; i < weekCombo.length; i++) {
                    weekCombo[i] = "Week " + i;
                } //ends for loop

                //set combo box models
                DefaultComboBoxModel weekModel = new DefaultComboBoxModel(weekCombo);
                viewMatchWeekCombo.setModel(weekModel);

                //add team matchup labels to the array
                viewMatchupTeams = new JLabel[10];
                viewMatchupTeams[0] = viewMatchTeam0;
                viewMatchupTeams[1] = viewMatchTeam1;
                viewMatchupTeams[2] = viewMatchTeam2;
                viewMatchupTeams[3] = viewMatchTeam3;
                viewMatchupTeams[4] = viewMatchTeam4;
                viewMatchupTeams[5] = viewMatchTeam5;
                viewMatchupTeams[6] = viewMatchTeam6;
                viewMatchupTeams[7] = viewMatchTeam7;
                viewMatchupTeams[8] = viewMatchTeam8;
                viewMatchupTeams[9] = viewMatchTeam9;
            } else if(pane.getSelectedIndex() == 5 && leagueLoaded == true) {
                //string arrays to set up the combo box models
                String weekCombo[] = new String[league.getNumWeeks() + 1];
                weekCombo[0] = "Select week...";
                for(int i = 1; i < weekCombo.length; i++) {
                    weekCombo[i] = "Week " + i;
                } //ends for loop
                String laneCombo[] = new String[league.getNumTeams()];
                for(int i = 0; i < laneCombo.length; i++) {
                    laneCombo[i] = "Lane " + (i+7);
                } //ends for loop
                
                JRootPane enterScoreRoot = SwingUtilities.getRootPane(enterScoreSaveChanges);
                enterScoreRoot.setDefaultButton(enterScoreSaveChanges);

                //set combo box models
                DefaultComboBoxModel weekModel = new DefaultComboBoxModel(weekCombo);
                enterScoreWeekCombo.setModel(weekModel);
                DefaultComboBoxModel laneModel = new DefaultComboBoxModel(laneCombo);
                enterScoreLaneCombo.setModel(laneModel);

                //add labels to the array
                enterScoreBowlers = new JLabel[6];
                enterScoreBowlers[0] = enterScoreBowlerLabel1;
                enterScoreBowlers[1] = enterScoreBowlerLabel2;
                enterScoreBowlers[2] = enterScoreBowlerLabel3;
                enterScoreBowlers[3] = enterScoreBowlerLabel4;
                enterScoreBowlers[4] = enterScoreBowlerLabel5;
                enterScoreBowlers[5] = enterScoreBowlerLabel6;

                //add text fields to the arrays
                enterScoreGame1 = new JTextField[6];
                enterScoreGame1[0] = enterScoreGame1Bowler1;
                enterScoreGame1[1] = enterScoreGame1Bowler2;
                enterScoreGame1[2] = enterScoreGame1Bowler3;
                enterScoreGame1[3] = enterScoreGame1Bowler4;
                enterScoreGame1[4] = enterScoreGame1Bowler5;
                enterScoreGame1[5] = enterScoreGame1Bowler6;
                enterScoreGame2 = new JTextField[6];
                enterScoreGame2[0] = enterScoreGame2Bowler1;
                enterScoreGame2[1] = enterScoreGame2Bowler2;
                enterScoreGame2[2] = enterScoreGame2Bowler3;
                enterScoreGame2[3] = enterScoreGame2Bowler4;
                enterScoreGame2[4] = enterScoreGame2Bowler5;
                enterScoreGame2[5] = enterScoreGame2Bowler6;
                enterScoreGame3 = new JTextField[6];
                enterScoreGame3[0] = enterScoreGame3Bowler1;
                enterScoreGame3[1] = enterScoreGame3Bowler2;
                enterScoreGame3[2] = enterScoreGame3Bowler3;
                enterScoreGame3[3] = enterScoreGame3Bowler4;
                enterScoreGame3[4] = enterScoreGame3Bowler5;
                enterScoreGame3[5] = enterScoreGame3Bowler6;

                //set up the fields with document filters/listeners
                //addDocumentFilters();
                addDocumentListeners();

                //clear and disable fields
                enterScoreLaneCombo.setSelectedIndex(0);
                enterScoreWeekCombo.setSelectedIndex(0);
                enterScoreLaneCombo.setEnabled(false);
                enterScoreTeamLabel.setText("");
                for(int i = 0; i < league.getNumBowlers(); i++) {
                    enterScoreGame1[i].setEnabled(false);
                    enterScoreGame2[i].setEnabled(false);
                    enterScoreGame3[i].setEnabled(false);
                    enterScoreGame1[i].setText("");
                    enterScoreGame2[i].setText("");
                    enterScoreGame3[i].setText("");
                    enterScoreBowlers[i].setText("");
                } //ends for loop
            } else if(pane.getSelectedIndex() == 6 && leagueLoaded == true) {
                //edit bowler panel
                //string array to set up the combo box model
                String teamCombo[] = new String[league.getNumTeams() + 1];
                teamCombo[0] = "Select team...";
                for(int i = 1; i < teamCombo.length; i++) {
                    teamCombo[i] = league.getTeam(i - 1).getName();
                } //ends for loop
                //set information for the combo box
                DefaultComboBoxModel teamModel = new DefaultComboBoxModel(teamCombo);
                editBowlerSelectTeamCombo.setModel(teamModel);
                //set bowler combo model to a default
                String[] bowlerCombo = new String[1];
                bowlerCombo[0] = "Select Bowler...";
                DefaultComboBoxModel bowlerModel = new DefaultComboBoxModel(bowlerCombo);
                editBowlerSelectBowlerCombo.setModel(bowlerModel);

                //set week combo box model
                String weekCombo[] = new String[league.getNumWeeks() + 1];
                weekCombo[0] = "Select week...";
                for(int i = 1; i <= league.getNumWeeks(); i++) {
                    weekCombo[i] = "Week " + i;
                } //ends for loop
                DefaultComboBoxModel weekModel = new DefaultComboBoxModel(weekCombo);
                editBowlerWeekCombo.setModel(weekModel);

                //clear and disable fields to start
                editBowlerGame1Text.setText("");
                editBowlerGame2Text.setText("");
                editBowlerGame3Text.setText("");
                editBowlerHdcpText.setText("");
                editBowlerNameText.setText("");
                editBowlerAvgText.setText("");
                editBowlerPrevAvgText.setText("");
                editBowlerPlayedText.setText("");
                editBowlerRolloffText.setText("");
                editBowlerAbsentText.setText("");
                editBowlerNewBowlerCheckbox.setSelected(false);

                editBowlerSelectBowlerCombo.setEnabled(false);
                editBowlerWeekCombo.setEnabled(false);
                editBowlerGame1Text.setEnabled(false);
                editBowlerGame2Text.setEnabled(false);
                editBowlerGame3Text.setEnabled(false);
                editBowlerHdcpText.setEnabled(false);
                editBowlerNameText.setEnabled(false);
                editBowlerAvgText.setEnabled(false);
                editBowlerPrevAvgText.setEnabled(false);
                editBowlerPlayedText.setEnabled(false);
                editBowlerRolloffText.setEnabled(false);
                editBowlerAbsentText.setEnabled(false);
                editBowlerNewBowlerCheckbox.setEnabled(false);
            } else if(pane.getSelectedIndex() == 7 && leagueLoaded == true) {
                sortByTeamIDButton.setEnabled(true);
                sortByTeamIDButton.doClick();
                sortByNameButton.setEnabled(true);
                sortByStandingButton.setEnabled(true);
                viewTeamsExportButton.setEnabled(true);
            } else if(pane.getSelectedIndex() == 8 && leagueLoaded == true &&
                      league.isWeekCompleted(league.getNumWeeks())) {
                //tab will only check information if the last week of bowling has been completed.
                //add bowlers to an array
                Bowler[] bowlers = new Bowler[league.getNumTeams() * league.getNumBowlers()];
                for(int i = 0; i < league.getNumTeams(); i++) {
                    for(int j = 0; j < league.getNumBowlers(); j++) {
                        bowlers[(i*league.getNumBowlers()) + j] = league.getTeam(i).getBowler(j);
                    }
                } //ends for loops
                
                //find bowlers with perfect attendance and print
                String output = "Bowlers with perfect attendance:\n";
                for(int i = 0; i < bowlers.length; i++) {
                    if(bowlers[i].getPerfectAttendance()) {
                        output += "   " + bowlers[i].getName() + "\n";
                    } //ends if
                } //ends for loop
                
                output += "\nAverage Changes\n";
                
                //sort bowlers by average difference and print
                sortByAvgChange(bowlers);
                for(int i = 0; i < bowlers.length; i++) {
                    output += "   " + bowlers[i].getName() + ": " + Math.round((bowlers[i].averageChange())) + "\n";               
                } //ends for loop
                
                output += "\nStandard Deviation\n";
                
                DecimalFormat df = new DecimalFormat("#0.000");
                //sort bowlers by average difference and print
                sortByStdDev(bowlers);
                for(int i = 0; i < bowlers.length; i++) {
                    output += "   " + bowlers[i].getName() + ":\t" + df.format(bowlers[i].getStdDev()) + "\n";               
                } //ends for loop
                
                output += "\n" + getHighHonors();
                
                endOfYearTextArea.setText(output);
            } //ends end of year tab
        }//ends outer if
    }//GEN-LAST:event_editBowlerPanelStateChanged

    private void editBowlerCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBowlerCancelButtonActionPerformed
        //clear fields and disable components
        editBowlerSelectBowlerCombo.setEnabled(false);
        editBowlerNameText.setEnabled(false);
        editBowlerNewBowlerCheckbox.setEnabled(false);
        editBowlerAvgText.setEnabled(false);
        editBowlerPrevAvgText.setEnabled(false);
        editBowlerPlayedText.setEnabled(false);
        editBowlerRolloffText.setEnabled(false);
        editBowlerAbsentText.setEnabled(false);
        editBowlerWeekCombo.setEnabled(false);
        editBowlerGame1Text.setEnabled(false);
        editBowlerGame2Text.setEnabled(false);
        editBowlerGame3Text.setEnabled(false);
        editBowlerHdcpText.setEnabled(false);

        editBowlerSelectBowlerCombo.setSelectedIndex(0);
        editBowlerSelectTeamCombo.setSelectedIndex(0);
        editBowlerNameText.setText("");
        editBowlerNewBowlerCheckbox.setSelected(false);
        editBowlerAvgText.setText("");
        editBowlerPrevAvgText.setText("");
        editBowlerPlayedText.setText("");
        editBowlerRolloffText.setText("");
        editBowlerAbsentText.setText("");
        editBowlerWeekCombo.setSelectedIndex(0);
        editBowlerGame1Text.setText("");
        editBowlerGame2Text.setText("");
        editBowlerGame3Text.setText("");
        editBowlerHdcpText.setText("");

    }//GEN-LAST:event_editBowlerCancelButtonActionPerformed

    private void editBowlerSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBowlerSaveButtonActionPerformed
        //get indices
        int teamIndex = editBowlerSelectTeamCombo.getSelectedIndex() - 1;
        int bowlerIndex = editBowlerSelectBowlerCombo.getSelectedIndex() - 1;
        Bowler bowlerCopy = null;

        try{
            //ensure not out of bounds
            if(teamIndex >= 0 && bowlerIndex >= 0) {
                Bowler bowler = league.getTeam(teamIndex).getBowler(bowlerIndex);
                //create a copy of the bowler to revert to should there be a data error.
                bowlerCopy = new Bowler(bowler);

                //update information
                bowler.setName(editBowlerNameText.getText());
                if(editBowlerNewBowlerCheckbox.isSelected())
                    bowler.setNewBowler(true);
                else
                    bowler.setNewBowler(false);
                bowler.setAverage(Double.parseDouble(editBowlerAvgText.getText()));
                bowler.changePrevAvg(Double.parseDouble(editBowlerPrevAvgText.getText()));
                bowler.setGamesPlayed(Integer.parseInt(editBowlerPlayedText.getText()));
                bowler.setGamesAbsent(Integer.parseInt(editBowlerAbsentText.getText()));
                bowler.setGamesRollOff(Integer.parseInt(editBowlerRolloffText.getText()));

                String rolloff = "r";
                String absent = "a";
                String score;
                int weekIndex = editBowlerWeekCombo.getSelectedIndex() - 1;

                if(weekIndex >= 0) {
                    int hdcp = Integer.parseInt(editBowlerHdcpText.getText());
                    //game 1
                    score = editBowlerGame1Text.getText();
                    if(score.contains(rolloff) || score.contains(rolloff.toUpperCase())) {
                        score = score.substring(0, score.length() - 1);
                        bowler.setScore(weekIndex, 0, new BowlingScore(Integer.parseInt(score), hdcp, true, false));
                    } else if(score.contains(absent) || score.contains(absent.toUpperCase())) {
                        score = score.substring(0, score.length() - 1);
                        bowler.setScore(weekIndex, 0, new BowlingScore(Integer.parseInt(score), hdcp, false, true));
                    } else {
                        bowler.setScore(weekIndex, 0, new BowlingScore(Integer.parseInt(score), hdcp, false, false));
                    } //ends if-else

                    //game 2
                    score = editBowlerGame2Text.getText();
                    if(score.contains(rolloff) || score.contains(rolloff.toUpperCase())) {
                        score = score.substring(0, score.length() - 1);
                        bowler.setScore(weekIndex, 1, new BowlingScore(Integer.parseInt(score), hdcp, true, false));
                    } else if(score.contains(absent) || score.contains(absent.toUpperCase())) {
                        score = score.substring(0, score.length() - 1);
                        bowler.setScore(weekIndex, 1, new BowlingScore(Integer.parseInt(score), hdcp, false, true));
                    } else {
                        bowler.setScore(weekIndex, 1, new BowlingScore(Integer.parseInt(score), hdcp, false, false));
                    } //ends if-else

                    //game 3
                    score = editBowlerGame2Text.getText();
                    if(score.contains(rolloff) || score.contains(rolloff.toUpperCase())) {
                        score = score.substring(0, score.length() - 1);
                        bowler.setScore(weekIndex, 2, new BowlingScore(Integer.parseInt(score), hdcp, true, false));
                    } else if(score.contains(absent) || score.contains(absent.toUpperCase())) {
                        score = score.substring(0, score.length() - 1);
                        bowler.setScore(weekIndex, 2, new BowlingScore(Integer.parseInt(score), hdcp, false, true));
                    } else {
                        bowler.setScore(weekIndex, 2, new BowlingScore(Integer.parseInt(score), hdcp, false, false));
                    } //ends if-else
                } //ends if

                //change flags
                enterScoresChanged = false;
                hasBeenSaved = false;
                enableMenuItems();

                //reset the selected index of the scores
                editBowlerWeekCombo.setSelectedIndex(0);
                //update high average and handicaps
                league.setHighAverage();
                league.setHandicaps();

            } //ends if
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
            league.getTeam(teamIndex).setBowler(bowlerCopy, bowlerIndex);
        }
    }//GEN-LAST:event_editBowlerSaveButtonActionPerformed

    private void editBowlerWeekComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBowlerWeekComboActionPerformed
        //get bowler and week indicies
        int weekIndex = editBowlerWeekCombo.getSelectedIndex() - 1;
        int teamIndex = editBowlerSelectTeamCombo.getSelectedIndex() - 1;
        int bowlerIndex = editBowlerSelectBowlerCombo.getSelectedIndex() - 1;

        if(weekIndex >= 0 && teamIndex >= 0 && bowlerIndex >= 0) {
            Bowler bowler = league.getTeam(teamIndex).getBowler(bowlerIndex);

            //enable the text fields
            editBowlerGame1Text.setEnabled(true);
            editBowlerGame2Text.setEnabled(true);
            editBowlerGame3Text.setEnabled(true);
            editBowlerHdcpText.setEnabled(true);

            //populate fields
            BowlingScore score = bowler.getScore(weekIndex, 0);
            if(score != null) {
                editBowlerGame1Text.setText(score.getScore() + "");
                editBowlerHdcpText.setText(score.getHdcp() + "");
            } else {
                editBowlerGame1Text.setText("999");
                editBowlerHdcpText.setText("0");
            }
            score = bowler.getScore(weekIndex, 1);
            if(score != null)
                editBowlerGame2Text.setText(score.getScore() + "");
            else
                editBowlerGame2Text.setText("999");
            score = bowler.getScore(weekIndex, 2);
            if(score != null)
                editBowlerGame3Text.setText(score.getScore() + "");
            else
                editBowlerGame3Text.setText("999");
        } else {
            editBowlerGame1Text.setText("");
            editBowlerGame2Text.setText("");
            editBowlerGame3Text.setText("");
            editBowlerHdcpText.setText("");

            editBowlerGame1Text.setEnabled(false);
            editBowlerGame2Text.setEnabled(false);
            editBowlerGame3Text.setEnabled(false);
            editBowlerHdcpText.setEnabled(false);
        }

    }//GEN-LAST:event_editBowlerWeekComboActionPerformed

    private void editBowlerSelectBowlerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBowlerSelectBowlerComboActionPerformed
        //load fields with pertinent data
        int teamIndex = editBowlerSelectTeamCombo.getSelectedIndex() - 1;
        int bowlerIndex = editBowlerSelectBowlerCombo.getSelectedIndex() - 1;

        if(teamIndex >= 0 && bowlerIndex >= 0) {
            Bowler bowler = league.getTeam(teamIndex).getBowler(bowlerIndex);

            //enable fields
            editBowlerNameText.setEnabled(true);
            editBowlerNewBowlerCheckbox.setEnabled(true);
            editBowlerAvgText.setEnabled(true);
            editBowlerPrevAvgText.setEnabled(true);
            editBowlerPlayedText.setEnabled(true);
            editBowlerRolloffText.setEnabled(true);
            editBowlerAbsentText.setEnabled(true);
            editBowlerWeekCombo.setEnabled(true);

            editBowlerNameText.setText(bowler.getName());
            if(bowler.isNewBowler())
                editBowlerNewBowlerCheckbox.setSelected(true);
            else
                editBowlerNewBowlerCheckbox.setSelected(false);
            
            editBowlerAvgText.setText(Math.round(bowler.getAvg()) + "");
            editBowlerPrevAvgText.setText(Math.round(bowler.getPrevAvg()) + "");
            editBowlerPlayedText.setText(bowler.getGamesPlayed() + "");
            editBowlerRolloffText.setText(bowler.getGamesRollOff() + "");
            editBowlerAbsentText.setText(bowler.getGamesAbsent() + "");
        } //ends if
    }//GEN-LAST:event_editBowlerSelectBowlerComboActionPerformed

    private void editBowlerSelectTeamComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBowlerSelectTeamComboActionPerformed
        //index of the team
        int index = editBowlerSelectTeamCombo.getSelectedIndex() - 1;

        if(index >= 0 ) {
            //clear and disable fields to start
            editBowlerGame1Text.setText("");
            editBowlerGame2Text.setText("");
            editBowlerGame3Text.setText("");
            editBowlerHdcpText.setText("");
            editBowlerNameText.setText("");
            editBowlerAvgText.setText("");
            editBowlerPrevAvgText.setText("");
            editBowlerPlayedText.setText("");
            editBowlerRolloffText.setText("");
            editBowlerAbsentText.setText("");
            editBowlerNewBowlerCheckbox.setSelected(false);

            editBowlerSelectBowlerCombo.setEnabled(false);
            editBowlerWeekCombo.setEnabled(false);
            editBowlerGame1Text.setEnabled(false);
            editBowlerGame2Text.setEnabled(false);
            editBowlerGame3Text.setEnabled(false);
            editBowlerHdcpText.setEnabled(false);
            editBowlerNameText.setEnabled(false);
            editBowlerAvgText.setEnabled(false);
            editBowlerPrevAvgText.setEnabled(false);
            editBowlerPlayedText.setEnabled(false);
            editBowlerRolloffText.setEnabled(false);
            editBowlerAbsentText.setEnabled(false);
            editBowlerNewBowlerCheckbox.setEnabled(false);

            //string array for the bowler combo
            String bowlerCombo[] = new String[league.getNumBowlers() + 1];
            bowlerCombo[0] = "Select bowler...";
            for(int i = 1; i < bowlerCombo.length; i++) {
                bowlerCombo[i] = league.getTeam(index).getBowler(i - 1).getName();
            } //ends for loop
            //set up the combo box model
            DefaultComboBoxModel bowlerModel = new DefaultComboBoxModel(bowlerCombo);
            editBowlerSelectBowlerCombo.setModel(bowlerModel);
            //enable the bowler combo
            editBowlerSelectBowlerCombo.setEnabled(true);
        } else {
            //clear and disable fields to start
            editBowlerGame1Text.setText("");
            editBowlerGame2Text.setText("");
            editBowlerGame3Text.setText("");
            editBowlerHdcpText.setText("");
            editBowlerNameText.setText("");
            editBowlerAvgText.setText("");
            editBowlerPrevAvgText.setText("");
            editBowlerPlayedText.setText("");
            editBowlerRolloffText.setText("");
            editBowlerAbsentText.setText("");
            editBowlerNewBowlerCheckbox.setSelected(false);

            editBowlerSelectBowlerCombo.setEnabled(false);
            editBowlerWeekCombo.setEnabled(false);
            editBowlerGame1Text.setEnabled(false);
            editBowlerGame2Text.setEnabled(false);
            editBowlerGame3Text.setEnabled(false);
            editBowlerHdcpText.setEnabled(false);
            editBowlerNameText.setEnabled(false);
            editBowlerAvgText.setEnabled(false);
            editBowlerPrevAvgText.setEnabled(false);
            editBowlerPlayedText.setEnabled(false);
            editBowlerRolloffText.setEnabled(false);
            editBowlerAbsentText.setEnabled(false);
            editBowlerNewBowlerCheckbox.setEnabled(false);
        }

    }//GEN-LAST:event_editBowlerSelectTeamComboActionPerformed

    private void enterScoreSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterScoreSaveChangesActionPerformed
        String rolloff = "r";
        String absent = "a";
        String score;

        try {
            for(int i = 0; i < league.getNumBowlers(); i++) {
                Bowler currentBowler = enterScoreCurrentTeam.getBowler(i);
                //game 1
                score = enterScoreGame1[i].getText();
                if(score.contains(rolloff) || score.contains(rolloff.toUpperCase())) {
                    score = score.substring(0, score.length() - 1);
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 0,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), true, false));
                } else if(score.contains(absent) || score.contains(absent.toUpperCase())) {
                    score = score.substring(0, score.length() - 1);
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 0,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), false, true));
                } else {
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 0,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), false, false));
                } //ends if-else

                //game 2
                score = enterScoreGame2[i].getText();
                if(score.contains(rolloff) || score.contains(rolloff.toUpperCase())) {
                    score = score.substring(0, score.length() - 1);
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 1,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), true, false));
                } else if(score.contains(absent) || score.contains(absent.toUpperCase())) {
                    score = score.substring(0, score.length() - 1);
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 1,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), false, true));
                } else {
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 1,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), false, false));
                } //ends if-else

                //game 3
                score = enterScoreGame3 [i].getText();
                if(score.contains(rolloff) || score.contains(rolloff.toUpperCase())) {
                    score = score.substring(0, score.length() - 1);
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 2,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), true, false));
                } else if(score.contains(absent) || score.contains(absent.toUpperCase())) {
                    score = score.substring(0, score.length() - 1);
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 2,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), false, true));
                } else {
                    currentBowler.setScore((enterScoreWeekCombo.getSelectedIndex() - 1), 2,
                        new BowlingScore(Integer.parseInt(score), currentBowler.getHdcp(), false, false));
                } //ends if-else            

                //change flags
                enterScoresChanged = false;
                hasBeenSaved = false;
                enableMenuItems();

            } //ends for
        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Incorrect number format in one of the fields.", "Error",  JOptionPane.ERROR_MESSAGE);      
        }
        
        if(enterScoreLaneCombo.getSelectedIndex() < (league.getNumTeams() + 1))
            enterScoreNextLaneButton.doClick();
    }//GEN-LAST:event_enterScoreSaveChangesActionPerformed

    private void enterScoreFinaliazeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterScoreFinaliazeButtonActionPerformed
        exportResults(enterScoreWeekCombo.getSelectedIndex());
        league.updateStats(enterScoreWeekCombo.getSelectedIndex());
        league.setHighAverage();
        league.setHandicaps();
        
        //change flags
        hasBeenSaved = false;
        enableMenuItems();
    }//GEN-LAST:event_enterScoreFinaliazeButtonActionPerformed

    private void enterScoreNextLaneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterScoreNextLaneButtonActionPerformed
        if(enterScoresChanged) {
            int result = JOptionPane.showConfirmDialog(this, "Scores have been changed. Do you wish to save?",
                "Save Changes?", JOptionPane.YES_NO_CANCEL_OPTION);
            //if user wishes to save, click the save menu button
            if(result == JOptionPane.YES_OPTION) {
                //save changes
                enterScoreSaveChanges.doClick();
                //go to next lane
                enterScoreLaneCombo.setSelectedIndex(enterScoreLaneCombo.getSelectedIndex() + 1);
                fillEnterScoreFields();
                //if user does not want to save exit
            } else if (result == JOptionPane.NO_OPTION) {
                //go to next lane
                enterScoreLaneCombo.setSelectedIndex(enterScoreLaneCombo.getSelectedIndex() + 1);
                fillEnterScoreFields();
            } //ends if-else
        } else {
            //go to next lane
            enterScoreLaneCombo.setSelectedIndex(enterScoreLaneCombo.getSelectedIndex() + 1);
            fillEnterScoreFields();
        } //ends if-else
    }//GEN-LAST:event_enterScoreNextLaneButtonActionPerformed

    private void enterScorePrevLaneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterScorePrevLaneButtonActionPerformed
        if(enterScoresChanged) {
            int result = JOptionPane.showConfirmDialog(this, "Scores have been changed. Do you wish to save?",
                "Save Changes?", JOptionPane.YES_NO_CANCEL_OPTION);
            //if user wishes to save, click the save changes button
            if(result == JOptionPane.YES_OPTION) {
                //save changes
                enterScoreSaveChanges.doClick();
                //go to next lane
                enterScoreLaneCombo.setSelectedIndex(enterScoreLaneCombo.getSelectedIndex() - 1);
                fillEnterScoreFields();
                //if user does not want to save exit
            } else if (result == JOptionPane.NO_OPTION) {
                //go to next lane
                enterScoreLaneCombo.setSelectedIndex(enterScoreLaneCombo.getSelectedIndex() - 1);
                fillEnterScoreFields();
            } //ends if-else
        } else {
            //go to next lane
            enterScoreLaneCombo.setSelectedIndex(enterScoreLaneCombo.getSelectedIndex() - 1);
            fillEnterScoreFields();
        } //ends if-else
    }//GEN-LAST:event_enterScorePrevLaneButtonActionPerformed

    private void enterScoreLaneComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterScoreLaneComboActionPerformed
        int weekIndex = enterScoreWeekCombo.getSelectedIndex();
        //update the fields if necessary
        if(weekIndex != 0) {
            fillEnterScoreFields();            
        } //end if

        //enable/disable buttons
        int laneIndex = enterScoreLaneCombo.getSelectedIndex();
        if(laneIndex == 0) {
            enterScorePrevLaneButton.setEnabled(false);
            enterScoreNextLaneButton.setEnabled(true);
        } else if(laneIndex == (league.getNumTeams() - 1)) {
            enterScorePrevLaneButton.setEnabled(true);
            enterScoreNextLaneButton.setEnabled(false);
        } else {
            enterScorePrevLaneButton.setEnabled(true);
            enterScoreNextLaneButton.setEnabled(true);
        } //ends if/else
    }//GEN-LAST:event_enterScoreLaneComboActionPerformed

    private void selectText(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectText
        JTextField caller = (JTextField)evt.getSource();
        caller.selectAll();
    }//GEN-LAST:event_selectText

    private void enterScoreWeekComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterScoreWeekComboActionPerformed
        int weekIndex = enterScoreWeekCombo.getSelectedIndex();
        if(weekIndex != 0) {
            //enable fields
            enterScoreLaneCombo.setEnabled(true); 
            enterScoreSaveChanges.setEnabled(true);
            for(int i = 0; i < league.getNumBowlers(); i++) {
                enterScoreGame1[i].setEnabled(true);
                enterScoreGame2[i].setEnabled(true);
                enterScoreGame3[i].setEnabled(true);
            } //ends for loop
            fillEnterScoreFields();

        } else {
            //clear and disable fields
            enterScoreLaneCombo.setSelectedIndex(0);
            enterScoreLaneCombo.setEnabled(false);
            enterScoreSaveChanges.setEnabled(false);
            for(int i = 0; i < league.getNumBowlers(); i++) {
                enterScoreGame1[i].setEnabled(false);
                enterScoreGame2[i].setEnabled(false);
                enterScoreGame3[i].setEnabled(false);
                enterScoreGame1[i].setText("");
                enterScoreGame2[i].setText("");
                enterScoreGame3[i].setText("");
                enterScoreBowlers[i].setText("");
            } //ends for loop
        } //ends else
    }//GEN-LAST:event_enterScoreWeekComboActionPerformed

    private Matchup[] getPositionRound() {
        Matchup[] matchup;

        //create position round for the last week of first half and last week of second half
        BowlingTeam teams[] = new BowlingTeam[league.getNumTeams()];
        for(int i = 0; i < teams.length; i++) {
            //load teams with the teams
            teams[i] = league.getTeam(i);
        } //ends for

        //sort into order by points
        mergeSort(teams, false);

        //create new matchup array pitting teams against each other by position
        String teamName = "";
        int team1 = -1, team2 = -1;
        matchup = new Matchup[league.getNumTeams()/2];
        for(int i = 0; i < matchup.length; i++) {
            //team 1
            teamName = teams[i*2].getName();
            for(int j = 0; j < league.getNumTeams(); j++) {
                BowlingTeam t = league.getTeam(j);
                if(t.getName().equalsIgnoreCase(teamName)) {
                    team1 = j;
                } //ends if
            } //ends for

            //team 2
            teamName = teams[i*2+1].getName();
            for(int j = 0; j < league.getNumTeams(); j++) {
                BowlingTeam t = league.getTeam(j);
                if(t.getName().equalsIgnoreCase(teamName)) {
                    team2 = j;
                } //ends if
            } //ends for

            matchup[i] = new Matchup(i, team1, team2);
        } //ends outer for
        
        return matchup;
    }
    
    private void viewMatchWeekComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMatchWeekComboActionPerformed
        int index = viewMatchWeekCombo.getSelectedIndex();
        Matchup[] matchup;
        if(index != 0) {
            if( (league.getNumTeams() < (league.getNumWeeks()/2)) && (index == (league.getNumWeeks()/2) || index == league.getNumWeeks()) ) {
                matchup = getPositionRound();
                league.setMatchupsForWeek(matchup, index);
                
                for(int i = 0; i < (league.getNumTeams() / 2); i++) {
                    viewMatchupTeams[(i*2)].setText(league.getTeam(matchup[i].getTeam1()).getName());
                    viewMatchupTeams[(i*2)+1].setText(league.getTeam(matchup[i].getTeam2()).getName());
                } //ends for loop
            } else {
                matchup = league.getMatchupsForWeek(index);
                for(int i = 0; i < (league.getNumTeams() / 2); i++) {
                    viewMatchupTeams[(i*2)].setText(league.getTeam(matchup[i].getTeam1()).getName());
                    viewMatchupTeams[(i*2)+1].setText(league.getTeam(matchup[i].getTeam2()).getName());
                } //ends for loop
            } //ends if
        } else {
            for(int i = 0; i < league.getNumTeams(); i++) {
                viewMatchupTeams[i].setText("");
            } //ends for loop
        } //ends else
    }//GEN-LAST:event_viewMatchWeekComboActionPerformed

    private void averageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averageButtonActionPerformed
        //array to hold the bowlers
        Bowler[] bowlers = new Bowler[league.getNumTeams() * league.getNumBowlers()];
        
        //load array with bowlers
        for(int i = 0; i < league.getNumTeams(); i++) {
            for(int j = 0; j < league.getNumBowlers(); j++) {
                bowlers[(i*league.getNumBowlers()) + j] = league.getTeam(i).getBowler(j);
            } //ends inner
        } //ends outer
        
        //mergeSort with byName false
        bowlerMergeSort(bowlers, false);
        
        //put sorted bowlers into text area
        String output = "";
        for(int i = 0; i < bowlers.length; i++) {
            if(!bowlers[i].getName().equalsIgnoreCase("Dummy"))
                output += bowlers[i].toString();
        } //ends for
        viewBowlerTextArea.setText(output);
        //show top of list
        viewBowlerTextArea.setCaretPosition(0); 
        
        //print info to output screen
        int numDummies = 0;
        System.out.println("Position  Bowler    Games  Total  Avg  Hdcp  High  High/3  HHdcp  HdcpSeries");
        for(int i = 0; i < bowlers.length; i++) {
            Bowler b = bowlers[i];
            if(!b.getName().equalsIgnoreCase("Dummy")) {
                System.out.print((i + 1 - numDummies) + "         " + b.getName());
                for(int j = b.getName().length(); j < 10; j++)
                    System.out.print(" ");
                System.out.print((b.getGamesPlayed() + b.getGamesRollOff()) + "      " +
                        b.getTotalPins() + "    " + Math.round(b.getAvg()) + "  " +
                        b.getHdcp() + "    ");
                if(b.getHighGame() > b.getHighRolloffGame())
                    System.out.print(b.getHighGame() + "   ");
                else
                    System.out.print(b.getHighRolloffGame() + "   ");
                if(b.getHighSeries() > b.getHighRolloffSeries())
                    System.out.print(b.getHighSeries() + "     ");
                else
                    System.out.print(b.getHighRolloffSeries() + "     ");
                if(b.getHighHdcpGame() > b.getHighHdcpRolloffGame())
                    System.out.print(b.getHighHdcpGame());
                else
                    System.out.print(b.getHighHdcpRolloffGame());
                System.out.print("    ");
                if(b.getHighHdcpSeries() > b.getHighHdcpRolloffSeries())
                    System.out.print(b.getHighHdcpSeries());
                else
                    System.out.print(b.getHighHdcpRolloffSeries());
                System.out.println();
            } else {
                numDummies++;
            } //ends else
        } //ends for
        
        printHighHonors();
    }//GEN-LAST:event_averageButtonActionPerformed

    private void printHighHonors() {
        //print high honors
        String highGameName = "", highSeriesName = "", highTeamGame = "", highTeamSeries = "";
        int highGame = 0, highSeries = 0, highTeamHdcpGame = 0, highTeamHdcpSeries = 0;
        for(int i = 0; i < league.getNumTeams(); i++) {
            BowlingTeam team = league.getTeam(i);
            if(team.getHdcpGame() > highTeamHdcpGame) {
                highTeamHdcpGame = team.getHdcpGame();
                highTeamGame = team.getName();
            } else if (team.getHdcpGame() == highTeamHdcpGame) {
                highTeamHdcpGame = team.getHdcpGame();
                highTeamGame += (" and " + team.getName());
            }//ends if for team game
            if(team.getHdcpSeries() > highTeamHdcpSeries) {
                highTeamHdcpSeries = team.getHdcpSeries();
                highTeamSeries = team.getName();
            } else if(team.getHdcpSeries() == highTeamHdcpSeries) {
                highTeamHdcpSeries = team.getHdcpSeries();
                highTeamSeries += (" and " + team.getName());
            }//ends if for team series
            
            for(int j = 0; j < league.getNumBowlers(); j++) {
                Bowler bowler = team.getBowler(j);
                if(bowler.getHighHdcpGame() > highGame) {
                    highGame = bowler.getHighHdcpGame();
                    highGameName = bowler.getName();
                } else if(bowler.getHighHdcpGame() == highGame) {
                    highGame = bowler.getHighHdcpGame();
                    highGameName += (" and " + bowler.getName());
                } //ends if for bowler game
                if(bowler.getHighHdcpSeries() > highSeries) {
                    highSeries = bowler.getHighHdcpSeries();
                    highSeriesName = bowler.getName();
                } else if(bowler.getHighHdcpSeries() == highSeries) { 
                    highSeries = bowler.getHighHdcpSeries();
                    highSeriesName += (" and " + bowler.getName());
                } //ends if for bowler series
            } //ends for loop for bowlers
        } //ends for loop for teams
        System.out.println("High HDCP Game: " + highGameName + " " + highGame);
        System.out.println("High HDCP Series: " + highSeriesName + " " + highSeries);
        System.out.println("Team High HDCP Game: " + highTeamGame + " " + highTeamHdcpGame);
        System.out.println("Team High HDCP Series: " + highTeamSeries + " " + highTeamHdcpSeries);
    } //ends printHighHonors
    
    private String getHighHonors() {
        //print high honors
        String highGameName = "", highSeriesName = "", highTeamGame = "", highTeamSeries = "";
        String output = "";
        int highGame = 0, highSeries = 0, highTeamHdcpGame = 0, highTeamHdcpSeries = 0;
        for(int i = 0; i < league.getNumTeams(); i++) {
            BowlingTeam team = league.getTeam(i);
            if(team.getHdcpGame() > highTeamHdcpGame) {
                highTeamHdcpGame = team.getHdcpGame();
                highTeamGame = team.getName();
            } else if (team.getHdcpGame() == highTeamHdcpGame) {
                highTeamHdcpGame = team.getHdcpGame();
                highTeamGame += (" and " + team.getName());
            }//ends if for team game
            if(team.getHdcpSeries() > highTeamHdcpSeries) {
                highTeamHdcpSeries = team.getHdcpSeries();
                highTeamSeries = team.getName();
            } else if(team.getHdcpSeries() == highTeamHdcpSeries) {
                highTeamHdcpSeries = team.getHdcpSeries();
                highTeamSeries += (" and " + team.getName());
            }//ends if for team series
            
            for(int j = 0; j < league.getNumBowlers(); j++) {
                Bowler bowler = team.getBowler(j);
                if(bowler.getHighHdcpGame() > highGame) {
                    highGame = bowler.getHighHdcpGame();
                    highGameName = bowler.getName();
                } else if(bowler.getHighHdcpGame() == highGame) {
                    highGame = bowler.getHighHdcpGame();
                    highGameName += (" and " + bowler.getName());
                } //ends if for bowler game
                if(bowler.getHighHdcpSeries() > highSeries) {
                    highSeries = bowler.getHighHdcpSeries();
                    highSeriesName = bowler.getName();
                } else if(bowler.getHighHdcpSeries() == highSeries) { 
                    highSeries = bowler.getHighHdcpSeries();
                    highSeriesName += (" and " + bowler.getName());
                } //ends if for bowler series
            } //ends for loop for bowlers
        } //ends for loop for teams
        
        output += "High Honors:\n";
        output += "   High HDCP Game: " + highGameName + " " + highGame + "\n";
        output += "   High HDCP Series: " + highSeriesName + " " + highSeries + "\n";
        output += "   Team High HDCP Game: " + highTeamGame + " " + highTeamHdcpGame + "\n";
        output += "   Team High HDCP Series: " + highTeamSeries + " " + highTeamHdcpSeries + "\n";
        
        return output;
    } //ends getHighHonors
    
    private void alphabeticButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphabeticButtonActionPerformed
        //array to hold the bowlers
        Bowler[] bowlers = new Bowler[league.getNumTeams() * league.getNumBowlers()];
        
        //load array with bowlers
        for(int i = 0; i < league.getNumTeams(); i++) {
            for(int j = 0; j < league.getNumBowlers(); j++) {
                bowlers[(i*league.getNumBowlers()) + j] = league.getTeam(i).getBowler(j);
            } //ends inner
        } //ends outer
                
        //mergeSort with true for byName
        bowlerMergeSort(bowlers, true);
        
        //update the text area with bowler information
        String output = "";
        for(int i = 0; i < bowlers.length; i++) {
            if(!bowlers[i].getName().equalsIgnoreCase("Dummy"))
                output += bowlers[i].toString();
        } //ends for loop
        
        viewBowlerTextArea.setText(output);
        viewBowlerTextArea.setCaretPosition(0);
    }//GEN-LAST:event_alphabeticButtonActionPerformed

    private void bowlerMergeSort(Bowler[] bowlers, boolean byName) {
        if(bowlers.length > 1) {
            //split array into two roughly equal arrays
            int mid = bowlers.length / 2;
            Bowler[] leftArray = Arrays.copyOfRange(bowlers, 0, mid);
            Bowler[] rightArray = Arrays.copyOfRange(bowlers, mid, bowlers.length);
            
            //call merge sort for each half of the array
            bowlerMergeSort(leftArray, byName);
            bowlerMergeSort(rightArray, byName);
            
            //if sorting by name call bowlerMergeByName, else call bowlerMergeByAverage
            if(byName)
                bowlerMergeByName(bowlers, leftArray, rightArray);
            else
                bowlerMergeByAverage(bowlers, leftArray, rightArray);
        }
    } //ends bowlerMergeSort
    
    private void bowlerMergeByName(Bowler[] bowlers, Bowler[] left, Bowler[] right) {
        //declare and initialze necessary counters
        int totalElem = left.length + right.length;
        int index = 0, leftIndex = 0, rightIndex = 0;
        
        while(index < totalElem) {
            //check to see if one of the arrays has merged all its elements already
            if(leftIndex < left.length && rightIndex < right.length) {
                //if the bowler's name is less than the right bowlers name
                if(left[leftIndex].getName().compareToIgnoreCase(right[rightIndex].getName()) < 0) {
                    bowlers[index] = left[leftIndex];
                    index++;
                    leftIndex++;
                } else {
                    bowlers[index] = right[rightIndex];
                    index++;
                    rightIndex++;
                } //ends comparison                
            } else { //if one of the arrays is empty, copy the rest of the other array into teams
                //if left array is empty
                if(leftIndex >= left.length) {
                    //copy remaining right array into teams
                    while(rightIndex < right.length) {
                        bowlers[index] = right[rightIndex];
                        index++;
                        rightIndex++;
                    } //ends right array copy
                } //ends if left array empty
                if(rightIndex >= right.length) {
                    while(leftIndex < left.length) {
                        bowlers[index] = left[leftIndex];
                        index++;
                        leftIndex++;
                    } //ends left array copy
                } //ends if right array empty
            } //ends if/else                            
        } //ends while loop
    } //ends bowlerMergeByName
    
    private void bowlerMergeByAverage(Bowler[] bowlers, Bowler[] left, Bowler[] right) {
        //declare and initialze necessary counters
        int totalElem = left.length + right.length;
        int index = 0, leftIndex = 0, rightIndex = 0;
        
        while(index < totalElem) {
            //check to see if one of the arrays has merged all its elements already
            if(leftIndex < left.length && rightIndex < right.length) {
                //if the left bowler has a higher average
                if(Math.round(left[leftIndex].getAvg()) > Math.round(right[rightIndex].getAvg())) {
                    bowlers[index] = left[leftIndex];
                    index++;
                    leftIndex++;
                } else if(Math.round(left[leftIndex].getAvg()) < Math.round(right[rightIndex].getAvg())){
                    //if the left bowler has a lower average
                    bowlers[index] = right[rightIndex];
                    index++;
                    rightIndex++;
                } else {                
                    //if the bowlers have the same rounded average, sort by total pins
                    if(left[leftIndex].getTotalPins() > right[rightIndex].getTotalPins()) {
                        bowlers[index] = left[leftIndex];
                        index++;
                        leftIndex++;
                    } else {
                        bowlers[index] = right[rightIndex];
                        index++;
                        rightIndex++;
                    } //ends sorting by total pins
                } //ends sorting by total points
            } else { //if one of the arrays is empty, copy the rest of the other array into teams
                //if left array is empty
                if(leftIndex >= left.length) {
                    //copy remaining right array into bowlers
                    while(rightIndex < right.length) {
                        bowlers[index] = right[rightIndex];
                        index++;
                        rightIndex++;
                    } //ends right array copy
                } //ends if left array empty
                if(rightIndex >= right.length) {
                    while(leftIndex < left.length) {
                        bowlers[index] = left[leftIndex];
                        index++;
                        leftIndex++;
                    } //ends left array copy
                } //ends if right array empty
            } //ends if/else                            
        } //ends while loop
    } //ends bowlerMergeByAverage
    private void finalizeTeamChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeTeamChangesButtonActionPerformed
        //set the leagues high average and the bowler handicaps
        league.setHighAverage();
        league.setHandicaps();

        //update save menu and flag
        hasBeenSaved = false;
        enableMenuItems();
    }//GEN-LAST:event_finalizeTeamChangesButtonActionPerformed

    private void editTeamNameTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamNameTextFocusGained
        editTeamNameText.selectAll();
    }//GEN-LAST:event_editTeamNameTextFocusGained

    private void moveBowlerUp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerUp1ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerUp(0);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerUp1ActionPerformed

    private void moveBowlerDown6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerDown6ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerDown(5);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerDown6ActionPerformed

    private void moveBowlerUp6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerUp6ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerUp(5);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerUp6ActionPerformed

    private void moveBowlerDown5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerDown5ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerDown(4);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerDown5ActionPerformed

    private void moveBowlerUp5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerUp5ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerUp(4);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerUp5ActionPerformed

    private void moveBowlerDown4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerDown4ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerDown(3);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerDown4ActionPerformed

    private void moveBowlerUp4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerUp4ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerUp(3);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerUp4ActionPerformed

    private void moveBowlerDown3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerDown3ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerDown(2);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerDown3ActionPerformed

    private void moveBowlerUp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerUp3ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerUp(2);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerUp3ActionPerformed

    private void moveBowlerDown2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerDown2ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerDown(1);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerDown2ActionPerformed

    private void moveBowlerUp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerUp2ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerUp(1);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerUp2ActionPerformed

    private void moveBowlerDown1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBowlerDown1ActionPerformed
        int index = teamComboBox.getSelectedIndex();
        BowlingTeam temp = league.getTeam(index - 1);
        temp.moveBowlerDown(0);
        hasBeenSaved = false;
        enableMenuItems();
        teamComboBox.setSelectedIndex(0);
        teamComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_moveBowlerDown1ActionPerformed

    private void editTeamAverage6FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamAverage6FocusGained
        editTeamAverage6.selectAll();
    }//GEN-LAST:event_editTeamAverage6FocusGained

    private void editTeamBowlerName6FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamBowlerName6FocusGained
        editTeamBowlerName6.selectAll();
    }//GEN-LAST:event_editTeamBowlerName6FocusGained

    private void editTeamAverage5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamAverage5FocusGained
        editTeamAverage5.selectAll();
    }//GEN-LAST:event_editTeamAverage5FocusGained

    private void editTeamBowlerName5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamBowlerName5FocusGained
        editTeamBowlerName5.selectAll();
    }//GEN-LAST:event_editTeamBowlerName5FocusGained

    private void editTeamAverage4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamAverage4FocusGained
        editTeamAverage4.selectAll();
    }//GEN-LAST:event_editTeamAverage4FocusGained

    private void editTeamBowlerName4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamBowlerName4FocusGained
        editTeamBowlerName4.selectAll();
    }//GEN-LAST:event_editTeamBowlerName4FocusGained

    private void editTeamAverage3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamAverage3FocusGained
        editTeamAverage3.selectAll();
    }//GEN-LAST:event_editTeamAverage3FocusGained

    private void editTeamBowlerName3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamBowlerName3FocusGained
        editTeamBowlerName3.selectAll();
    }//GEN-LAST:event_editTeamBowlerName3FocusGained

    private void editTeamAverage2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamAverage2FocusGained
        editTeamAverage2.selectAll();
    }//GEN-LAST:event_editTeamAverage2FocusGained

    private void editTeamBowlerName2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamBowlerName2FocusGained
        editTeamBowlerName2.selectAll();
    }//GEN-LAST:event_editTeamBowlerName2FocusGained

    private void editTeamAverage1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamAverage1FocusGained
        editTeamAverage1.selectAll();
    }//GEN-LAST:event_editTeamAverage1FocusGained

    private void editTeamBowlerName1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editTeamBowlerName1FocusGained
        editTeamBowlerName1.selectAll();
    }//GEN-LAST:event_editTeamBowlerName1FocusGained

    private void cancelTeamChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTeamChangesButtonActionPerformed
        teamComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_cancelTeamChangesButtonActionPerformed

    private void saveTeamChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTeamChangesButtonActionPerformed
        int index = teamComboBox.getSelectedIndex();

        try {
            league.getTeam(index-1).setName(editTeamNameText.getText());
            for(int i = 0; i < league.getNumBowlers(); i++) {
                Bowler temp = league.getTeam(index-1).getBowler(i);
                temp.setName(editTeamBowlers[i].getText());
                temp.setAverage(Double.parseDouble(editTeamAverages[i].getText()));
            } //ends for loop

            setEditTeamComboBoxModel();
            teamComboBox.setSelectedIndex(index);

            hasBeenSaved = false;
            enableMenuItems();
        } catch(Exception exc) {
            cancelTeamChangesButton.doClick();
        } //ends catch
    }//GEN-LAST:event_saveTeamChangesButtonActionPerformed

    private void teamComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_teamComboBoxItemStateChanged
        int index = 0;
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            index = teamComboBox.getSelectedIndex();
            if(index > 0) {
                for(int i = 0; i < league.getNumBowlers(); i++) {
                    Bowler temp = league.getTeam(index - 1).getBowler(i);
                    //enable and initialize fields as needed
                    editTeamBowlers[i].setEnabled(true);
                    editTeamBowlers[i].setText(temp.getName());
                    editTeamAverages[i].setEnabled(true);
                    editTeamAverages[i].setText(Math.round(temp.getAvg()) + "");

                    //enable buttons needed
                    moveBowlersUp[i].setEnabled(true);
                    moveBowlersDown[i].setEnabled(true);
                } //ends for loop

                editTeamNameText.setEnabled(true);
                editTeamNameText.setText(league.getTeam(index-1).getName());
            } else
            for(int i = 0; i < league.getNumBowlers(); i++) {
                //clear and disable fields
                editTeamBowlers[i].setEnabled(false);
                editTeamBowlers[i].setText("");
                editTeamAverages[i].setEnabled(false);
                editTeamAverages[i].setText("");
                editTeamNameText.setEnabled(false);
                editTeamNameText.setText("");

                //disable buttons
                moveBowlersUp[i].setEnabled(false);
                moveBowlersDown[i].setEnabled(false);
            } //ends for loop
        } //ends if
    }//GEN-LAST:event_teamComboBoxItemStateChanged

    private void cancelLeagueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelLeagueButtonActionPerformed
        //clear the fields and hide the new league panel
        newLeaguePanel.setVisible(false);
        newLeagueNameText.setText("");
        newLeagueNumTeamsText.setText("");
        newLeagueNumBowlersText.setText("");
        editBowlerPanel.setSelectedComponent(homePanel);
    }//GEN-LAST:event_cancelLeagueButtonActionPerformed

    private void createLeagueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createLeagueButtonActionPerformed
        //********************************************
        //put if statement in here to test whether current league had been saved.
        //use showMessageDialog - save previous league before creating new if needed
        //********************************************
        //try to create a league with user entered information. then hide clear fields/hide panel
        try{
            league = new BowlingLeague(newLeagueNameText.getText(), Integer.parseInt(newLeagueNumTeamsText.getText()),
                Integer.parseInt(newLeagueNumBowlersText.getText()), Integer.parseInt(newLeagueNumWeeksText.getText()));
            System.out.println(league.toString());
            //set flags
            hasBeenSaved = false;
            leagueLoaded = true;
            enableMenuItems();

            //reset fields by clicking the cancel button
            cancelLeagueButton.doClick();
        } catch(Exception e) {
            System.out.println("Error creating league.");
            newLeagueNameText.setText("");
            newLeagueNumTeamsText.setText("");
            newLeagueNumBowlersText.setText("");
            newLeagueNumWeeksText.setText("");
        } //ends try-catch
    }//GEN-LAST:event_createLeagueButtonActionPerformed

    private void editBowlerDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBowlerDeleteButtonActionPerformed
        int teamIndex = editBowlerSelectTeamCombo.getSelectedIndex() - 1;
        int bowlerIndex = editBowlerSelectBowlerCombo.getSelectedIndex() - 1;
        
        if(teamIndex >= 0 && bowlerIndex >= 0) {
            Bowler bowler = league.getTeam(teamIndex).getBowler(bowlerIndex);
            int response = JOptionPane.showConfirmDialog(null, "Delete " + bowler.getName() + 
                    " from the league and replace with dummy?", "Delete Bowler?", JOptionPane.YES_NO_OPTION);
            if(response == JOptionPane.YES_OPTION) {
                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + 
                    bowler.getName() + "?", "Delete Bowler?", JOptionPane.YES_NO_OPTION);
                if(confirm == JOptionPane.YES_OPTION) {
                    Bowler oldBowler = new Bowler(bowler);
                    //replace bowler with a dummy
                    league.getTeam(teamIndex).setBowler(new Bowler(bowler.getNumWeeks()), bowlerIndex);
                    bowler = league.getTeam(teamIndex).getBowler(bowlerIndex);
                    //copy the previous bowler's score array for posterity
                    for(int i = 0; i < oldBowler.getNumWeeks(); i++) {
                        for(int j = 0; j < 3; j++) {
                            bowler.setScore(i, j, oldBowler.getScore(i, j));
                        } //ends inner for
                    } //ends outer for
                    league.setHandicaps();
                    //set flags
                    hasBeenSaved = false;
                    leagueLoaded = true;
                    enableMenuItems();
                    
                    editBowlerSelectTeamCombo.setSelectedIndex(teamIndex + 1);
                    editBowlerSelectBowlerCombo.setSelectedIndex(0);
                } //ends if
            } //ends if            
        } //ends outer if
    }//GEN-LAST:event_editBowlerDeleteButtonActionPerformed

    private void sortByStandingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByStandingButtonActionPerformed
        //array to hold the bowling teams
        BowlingTeam[] teams = new BowlingTeam[league.getNumTeams()];
        
        //load array with teams
        for(int i = 0; i < teams.length; i++)
            teams[i] = league.getTeam(i);
        
        //mergeSort with false for byName
        mergeSort(teams, false);
        
        //update the text area with team information
        String output = "";
        System.out.println("Name           Wins  Losses  Total Pins  Points      Total  Hdcp");
        for(int i = 0; i < teams.length; i++) {
            output += teams[i].toString();
            System.out.print(teams[i].getName());
            for(int j = teams[i].getName().length(); j < 17; j++) {
                System.out.print(" ");
            }
            System.out.print(teams[i].getWins() + "     " + teams[i].getLosses() + "       " + teams[i].getTotalPinsWins() +
                    "           " + teams[i].getTotalPoints() + "       " + teams[i].getTotalPins() + "   " +
                    teams[i].getHdcp() + "\n");
        } //ends for loop
        
        viewTeamStatsTextArea.setText(output);
        viewTeamStatsTextArea.setCaretPosition(0);
    }//GEN-LAST:event_sortByStandingButtonActionPerformed

    private void sortByTeamIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByTeamIDButtonActionPerformed
        String output = "";
        for(int i = 0; i < league.getNumTeams(); i++) {
            output += league.getTeam(i).toString();
        } //ends for loop
        
        viewTeamStatsTextArea.setText(output);
        viewTeamStatsTextArea.setCaretPosition(0);
        
    }//GEN-LAST:event_sortByTeamIDButtonActionPerformed

    private void sortByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByNameButtonActionPerformed
        //array to hold the bowling teams
        BowlingTeam[] teams = new BowlingTeam[league.getNumTeams()];
        
        //load array with teams
        for(int i = 0; i < teams.length; i++)
            teams[i] = league.getTeam(i);
        
        //mergeSort with true for byName
        mergeSort(teams, true);
        
        //update the text area with team information
        String output = "";
        for(int i = 0; i < teams.length; i++) {
            output += teams[i].toString();
        } //ends for loop
        
        viewTeamStatsTextArea.setText(output);
        viewTeamStatsTextArea.setCaretPosition(0);
    }//GEN-LAST:event_sortByNameButtonActionPerformed

    private void viewBowlerExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBowlerExportButtonActionPerformed
        //array to hold the bowlers
        Bowler[] bowlers = new Bowler[league.getNumTeams() * league.getNumBowlers()];
        
        //load array with bowlers
        for(int i = 0; i < league.getNumTeams(); i++) {
            for(int j = 0; j < league.getNumBowlers(); j++) {
                bowlers[(i*league.getNumBowlers()) + j] = league.getTeam(i).getBowler(j);
            } //ends inner
        } //ends outer
        
        //mergeSort with byName false
        bowlerMergeSort(bowlers, false);
        //move dummies down
        sortDummies(bowlers);
        
        //get the week of the stats to export
        int week = 1;
        for(int i = 1; i <= league.getNumWeeks(); i++) {
            if(league.isWeekCompleted(i)) {
                week++;
            }
        }
        
        //create the file name to export to
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("MMddyy");
        
        String filePath = "C:\\Users\\Michael\\Documents\\Bowling Files\\Bowler Stats\\" + league.getName() + "week" + week + "BowlerStats" + sdf.format(date) + ".txt";
        System.out.println(filePath);
        
        //string to hold a copy of the output
        String output = "";
        
        try {
            File bowlerFile = new File(filePath);
            //create the file if necessary
            if(!bowlerFile.exists()) {
                bowlerFile.createNewFile();
            } //ends if
            
            FileWriter fw = new FileWriter(bowlerFile.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            
            //write output to file
            bw.write("Position\tBowler\tGames\tTotal\tAvg\tHDCP\tHigh\tHigh/3\tGame HDCP\tSeries HDCP");
            bw.newLine();
            output += "Position\tBowler\tGames\tTotal\tAvg\tHDCP\tHigh\tHigh/3\tGame HDCP\tSeries HDCP\r";
            
            int numDummies = 0;
            for(int i = 0; i < bowlers.length; i++) {
                Bowler b = bowlers[i];
                
                if(!b.getName().equalsIgnoreCase("Dummy")) {
                    bw.write((i+1-numDummies) + "\t" + b.getName() + "\t" + (b.getGamesPlayed() + b.getGamesRollOff()) + "\t" + 
                            b.getTotalPins() + "\t");
                    output += (i+1-numDummies) + "\t" + b.getName() + "\t" + (b.getGamesPlayed() + b.getGamesRollOff()) + "\t" + 
                            b.getTotalPins() + "\t";
                    //write DUMMY in place of average if new bowler
                    if(b.isNewBowler()) {
                        bw.write("DUMMY\t");
                        output += "DUMMY\t";
                    } else {
                        bw.write(Math.round(b.getAvg()) + "\t");
                        output += Math.round(b.getAvg()) + "\t";
                    }
                
                    bw.write(b.getHdcp() + "\t");
                    output += b.getHdcp() + "\t";
                
                    //write high game
                    if(b.getHighGame() > b.getHighRolloffGame())
                        if(b.getHighGame() != 0) {
                            bw.write(b.getHighGame() + "\t");
                            output += b.getHighGame() + "\t";
                        } else {
                            bw.write("-\t");
                            output += "-\t";
                        }
                    else
                        if(b.getHighHdcpRolloffGame() != 0) {
                            bw.write(b.getHighRolloffGame() + "\t");
                            output += b.getHighRolloffGame() + "\t";
                        } else {
                            bw.write("-\t");
                            output += "-\t";
                        }
                
                    //write high series
                    if(b.getHighSeries() > b.getHighRolloffSeries())
                        if(b.getHighSeries() != 0) {
                            bw.write(b.getHighSeries() + "\t");
                            output += b.getHighSeries() + "\t";
                        } else {
                            bw.write("-\t");
                            output += "-\t";
                        }
                    else
                        if(b.getHighRolloffSeries() != 0) {
                            bw.write(b.getHighRolloffSeries() + "\t");
                            output += b.getHighRolloffSeries() + "\t";
                        } else {
                            bw.write("-\t");
                            output += "-\t";
                        }
                
                    //write high hdcp game
                    if(b.getHighHdcpGame() > b.getHighHdcpRolloffGame())
                        if(b.getHighHdcpGame() != 0) {
                            bw.write(b.getHighHdcpGame() + "\t");
                            output += b.getHighHdcpGame() + "\t";
                        } else {
                            bw.write("-\t");
                            output += "-\t";
                        }
                    else
                        if(b.getHighHdcpRolloffGame() != 0) {
                            bw.write(b.getHighHdcpRolloffGame() + "\t");
                            output += b.getHighHdcpRolloffGame() + "\t";
                        } else {
                            bw.write("-\t");
                            output += "-\t";
                        }
                
                    //write high hdcp series
                    if(b.getHighHdcpSeries() > b.getHighHdcpRolloffSeries())
                        if(b.getHighHdcpSeries() != 0) {
                            bw.write(b.getHighHdcpSeries() + "");
                            output += b.getHighHdcpSeries() + "";
                        } else {
                            bw.write("-");
                            output += "-";
                        }
                    else
                        if(b.getHighHdcpRolloffSeries() != 0) {
                            bw.write(b.getHighHdcpRolloffSeries() + "");
                            output += b.getHighHdcpRolloffSeries() + "";
                        } else {
                            bw.write("-");
                            output += "-";
                        }
                
                    bw.newLine();
                    output += "\r";
                } else {
                    numDummies++;
                } //ends if else
            } //ends for
            
            //close file
            bw.close();
            
            //write output to the clipboard
            StringSelection selection = new StringSelection(output);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);
            
        } catch(IOException e) {
            e.printStackTrace();
        } //ends catch
    }//GEN-LAST:event_viewBowlerExportButtonActionPerformed

    private void viewTeamsExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTeamsExportButtonActionPerformed
        //array to hold the bowling teams
        BowlingTeam[] teams = new BowlingTeam[league.getNumTeams()];
        
        //load array with teams
        for(int i = 0; i < teams.length; i++)
            teams[i] = league.getTeam(i);
        
        //mergeSort with false for byName if it is not the first week of the league
        if(league.isWeekCompleted(1)) {
            mergeSort(teams, false);
        } //ends if
                
        //get the week of the stats to export
        int week = 1;
        //while(league.isWeekCompleted(week) && (week <= league.getNumWeeks())) {
        //    week++;
        //}
        for(int i = 1; i <= league.getNumWeeks(); i++) {
            if(league.isWeekCompleted(i)) {
                week++;
            } else {
                i = league.getNumWeeks() + 10;
            }
        }
        
        //create the file name to export to
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("MMddyy");
        
        String filePath = "C:\\Users\\Michael\\Documents\\Bowling Files\\Team Stats\\" + league.getName() + "week" + week + "TeamStats" + sdf.format(date) + ".txt";
        System.out.println(filePath);
        
        //string to hold output to go to clipboard
        String output = "";
        
        try {
            File teamFile = new File(filePath);
            //create the file if necessary
            if(!teamFile.exists()) {
                teamFile.createNewFile();
            } //ends if
            
            FileWriter fw = new FileWriter(teamFile.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            
            //write output to file
            bw.write("Team\tWins\tLosses\tTotal Pins\tPoints\tTotal\tHDCP");
            bw.newLine();
            output += "Team\tWins\tLosses\tTotal Pins\tPoints\tTotal\tHDCP\r";
            
            for(int i = 0; i < teams.length; i++) {
                BowlingTeam t = teams[i];
                bw.write(t.getName() + "\t");
                output += t.getName() + "\t";
                //add 0.5 to wins for each tie
                if(t.getTies() != 0) {
                    bw.write((t.getWins() + (t.getTies() * 0.5)) + "\t");
                    output += (t.getWins() + (t.getTies() * 0.5)) + "\t";
                } else {
                    bw.write(t.getWins() + "\t");
                    output += t.getWins() + "\t";
                } //ends if-else for ties
                
                bw.write(t.getLosses() + "\t");
                output += t.getLosses() + "\t";
                //check for totalPinsTies
                if(t.getTotalPinsTies() != 0) {
                    bw.write((t.getTotalPinsWins() + (t.getTotalPinsWins() * 0.5)) + "\t");
                    output += (t.getTotalPinsWins() + (t.getTotalPinsWins() * 0.5)) + "\t";
                } else {
                    bw.write(t.getTotalPinsWins() + "\t");  
                    output += t.getTotalPinsWins() + "\t";
                } //ends if-else for totalpins
                
                bw.write(t.getTotalPoints() + "\t" + t.getTotalPins() + "\t" + t.getHdcp());
                output += t.getTotalPoints() + "\t" + t.getTotalPins() + "\t" + t.getHdcp();
                bw.newLine();
                output += "\r";
            } //ends for
            
            //print high honors
            for(int i = 0; i < 6; i++) {
                bw.newLine();
                output += "\r";
            }
            bw.write("* * HIGH HONORS * *");
            output += "* * HIGH HONORS * *";
            bw.newLine();
            bw.newLine();
            output += "\r\r";
            
            //print high honors
            String highGameName = "", highSeriesName = "", highTeamGame = "", highTeamSeries = "";
            int highGame = 0, highSeries = 0, highTeamHdcpGame = 0, highTeamHdcpSeries = 0;
            for(int i = 0; i < league.getNumTeams(); i++) {
                BowlingTeam team = league.getTeam(i);
                if(team.getHdcpGame() > highTeamHdcpGame) {
                    highTeamHdcpGame = team.getHdcpGame();
                    highTeamGame = team.getName();
                } else if (team.getHdcpGame() == highTeamHdcpGame) {
                    highTeamHdcpGame = team.getHdcpGame();
                    highTeamGame += (" and " + team.getName());
                }//ends if for team game
                if(team.getHdcpSeries() > highTeamHdcpSeries) {
                    highTeamHdcpSeries = team.getHdcpSeries();
                    highTeamSeries = team.getName();
                } else if(team.getHdcpSeries() == highTeamHdcpSeries) {
                    highTeamHdcpSeries = team.getHdcpSeries();
                    highTeamSeries += (" and " + team.getName());
                }//ends if for team series
            
                for(int j = 0; j < league.getNumBowlers(); j++) {
                    Bowler bowler = team.getBowler(j);
                    if(bowler.getHighHdcpGame() > highGame) {
                        highGame = bowler.getHighHdcpGame();
                        highGameName = bowler.getName();
                    } else if(bowler.getHighHdcpGame() == highGame) {
                        highGame = bowler.getHighHdcpGame();
                        highGameName += (" and " + bowler.getName());
                    } //ends if for bowler game
                    if(bowler.getHighHdcpSeries() > highSeries) {
                        highSeries = bowler.getHighHdcpSeries();
                        highSeriesName = bowler.getName();
                    } else if(bowler.getHighHdcpSeries() == highSeries) { 
                        highSeries = bowler.getHighHdcpSeries();
                        highSeriesName += (" and " + bowler.getName());
                    } //ends if for bowler series
                } //ends for loop for bowlers
            } //ends for loop for teams
            
            bw.write("High HDCP Game" + "\t");
            output += "High HDCP Game" + "\t";
            if(highGame == 0) {
                bw.write("-\t");
                output += "-\t";
            } else {
                bw.write(highGameName + " " + highGame + "\t");
                output += highGameName + " " + highGame + "\t";
            } //ends if-else bowler game
            bw.write("Team High Game HDCP" + "\t");
            output += "Team High Game HDCP" + "\t";
            if(highTeamHdcpGame == 0) {
                bw.write("-\t");
                output += "-\t";
            } else {
                bw.write(highTeamGame + " " + highTeamHdcpGame + "\t");
                output += highTeamGame + " " + highTeamHdcpGame + "\t";
            } //ends if-else team game
            bw.newLine();
            output += "\r";
            bw.write("High HDCP Series" + "\t");
            output += "High HDCP Series" + "\t";
            if(highSeries == 0) {
                bw.write("-\t");
                output += "-\t";
            } else {
                bw.write(highSeriesName + " " + highSeries + "\t");
                output += highSeriesName + " " + highSeries + "\t";
            } //ends if-else bowler game
            bw.write("Team High Series HDCP" + "\t");
            output += "Team High Series HDCP" + "\t";
            if(highTeamHdcpSeries == 0) {
                bw.write("-\t");
                output += "-\t";
            } else {
                bw.write(highTeamSeries + " " + highTeamHdcpSeries + "\t");
                output += highTeamSeries + " " + highTeamHdcpSeries + "\t";
            } //ends if-else team game
            
            bw.close();
            
            //copy output to clipboard
            StringSelection selection = new StringSelection(output);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);
            
        } catch(IOException e) {
            e.printStackTrace();
        } //ends try-catch
    }//GEN-LAST:event_viewTeamsExportButtonActionPerformed

    private void viewMatchupExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMatchupExportButtonActionPerformed
        //index of the week to export
        int index = viewMatchWeekCombo.getSelectedIndex();
        
        if(index != 0) {
            if(league.isWeekCompleted(index)) {
                //exportResults(index);
            } else {
                exportMatchups(index);
            } //ends if/else
        } //ends if
    }//GEN-LAST:event_viewMatchupExportButtonActionPerformed

    private void endOfYearExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endOfYearExportButtonActionPerformed
        //add bowlers to an array
        Bowler[] bowlers = new Bowler[league.getNumTeams() * league.getNumBowlers()];
        for(int i = 0; i < league.getNumTeams(); i++) {
            for(int j = 0; j < league.getNumBowlers(); j++) {
                bowlers[(i*league.getNumBowlers()) + j] = league.getTeam(i).getBowler(j);
            } //ends inner for
        } //ends for loops
        
        bowlerMergeSort(bowlers, true);
        
        String output = "";
        for(int i = 0; i < bowlers.length; i++) {
            output += bowlers[i].getHdcp() + "\t" + bowlers[i].getName() + "\r";
        } //ends for loop
        
        //copy output to clipboard
        StringSelection selection = new StringSelection(output);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);        
    }//GEN-LAST:event_endOfYearExportButtonActionPerformed

    private void exportMatchups(int week) {
        //create the file name to export to
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("MMddyy");
        
        String filePath = "C:\\Users\\Michael\\Documents\\Bowling Files\\Matchups\\" + league.getName() + "week" + week + "Matchups" + sdf.format(date) + ".txt";
        System.out.println(filePath);
        
        //string to hold output to go to clipboard
        String output = "";
        
        try {
            File teamFile = new File(filePath);
            //create the file if necessary
            if(!teamFile.exists()) {
                teamFile.createNewFile();
            } //ends if
                
            //objects used to write information to output file
            FileWriter fw = new FileWriter(teamFile.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            
            //date header
            bw.write("Date:\t" + sdf.format(date));
            bw.newLine();
            output += "Date:\t" + sdf.format(date) + "\r";
            
            //matchup array for the week
            Matchup[] matchup = league.getMatchupsForWeek(week);
            for(int i = 0; i < (league.getNumTeams() / 2); i++) {
                //pointers to the teams designated in the matchup for less calls to getTeam()
                BowlingTeam team1 = league.getTeam(matchup[i].getTeam1());
                BowlingTeam team2 = league.getTeam(matchup[i].getTeam2());
                //add 7 to lane because league starts on lane 7
                int lane = matchup[i].getLane() * 2 + 9;
                
                //write output to file and store in output for copying to clipboard
                //headers
                bw.write("Team:\t" + team1.getName() + "\t\t\tLane:\t" + lane + "\t\t\tTeam:\t" + team2.getName() + 
                         "\t\t\tLane:\t" + (lane+1));
                bw.newLine();
                bw.write("HDCP\tPLAYERS\t1st Game\t2nd Game\t3rd Game\tTOTAL\t\t\tHDCP\tPLAYERS\t1st Game\t2nd Game\t3rd Game\tTOTAL");
                bw.newLine();
                output += "Team:\t" + team1.getName() + "\t\t\tLane:\t" + lane + "\t\t\tTeam:\t" + team2.getName() + 
                          "\t\t\tLane:\t" + (lane+1) + "\r";
                output += "HDCP\tPLAYERS\t1st Game\t2nd Game\t3rd Game\tTOTAL\t\t\tHDCP\tPLAYERS\t1st Game\t2nd Game\t3rd Game\tTOTAL\r";
                
                //bowlers
                for(int j = 0; j < league.getNumBowlers(); j++) {
                    Bowler b1 = team1.getBowler(j);
                    Bowler b2 = team2.getBowler(j);
                    
                    //team 1 bowler info
                    bw.write(b1.getHdcp() + "\t");
                    output += b1.getHdcp() + "\t";
                    //add absent, rolloff or dummy information to name if needed
                    if(b1.isNewBowler()) {
                        bw.write(b1.getName() + " (Dummy)\t135\t135\t135\t");
                        output += b1.getName() + " (Dummy)\t135\t135\t135\t";
                    } else {
                        bw.write(b1.getName() + "\t\t\t\t");
                        output += b1.getName() + "\t\t\t\t";
                    } //ends if bowlers is not new
                    //tab over to second bowler
                    bw.write("\t\t\t");
                    output += "\t\t\t";                    
                    
                    //team 2 bowler info
                    bw.write(b2.getHdcp() + "\t");
                    output += b2.getHdcp() + "\t";
                    //add absent, rolloff or dummy information to name if needed
                    if(b2.isNewBowler()) {
                        bw.write(b2.getName() + " (Dummy)\t135\t135\t135\t");
                        output += b2.getName() + " (Dummy)\t135\t135\t135\t";
                    } else {
                        bw.write(b2.getName() + "\t\t\t\t");
                        output += b2.getName() + "\t\t\t\t";
                    } //ends if bowlers is not new
                    
                    //newlines
                    bw.newLine();
                    output += "\r"; 
                } //ends for for bowlers
                
                //move out of bowler data area
                for(int j = 0; j < (6-league.getNumBowlers()); j++) {
                    bw.newLine();
                    output += "\r";
                } //ends loop shifting output down to next team 
                
                //replace information that would be lost by copy/pasting
                bw.write("\tSubtotal:\t\t\t\t\t\t\t\tSubtotal:");
                bw.newLine();
                output += "\tSubtotal:\t\t\t\t\t\t\t\tSubtotal:\r";
                bw.write("\tHandicap:\t\t\t\t\t\t\t\tHandicap:");
                bw.newLine();
                output += "\tHandicap:\t=SUM(A" + (i*15+4) + ":A" + (i*15+9) + 
                          ")\t=C" + (i*15+11) + "\t=C" + (i*15+11) + "\t=C" + (i*15+11) + "*3\t\t\t\tHandicap:\t" +
                          "=SUM(I" + (i*15+4) + ":I" + (i*15+9) + ")\t=K" + (i*15+11) + "\t=K" + (i*15+11) + 
                          "\t=K" + (i*15+11) + "*3\r";
                bw.write("\tTotal including handicap:\t\t\t\t\t\t\t\tTotal including handicap:");
                bw.newLine();
                output += "\tTotal including handicap:\t\t\t\t\t\t\t\tTotal including handicap:\r";
                bw.write("\t\tWin?\tWin?\tWin?\tTot Pins?\t\t\t\t\tWin?\tWin?\tWin?\tTot Pins?");
                bw.newLine();
                output += "\t\tWin?\tWin?\tWin?\tTot Pins?\t\t\t\t\tWin?\tWin?\tWin?\tTot Pins?\r";
                bw.newLine();
                bw.newLine();
                output += "\r\r";
                if(i < (league.getNumTeams() / 2 - 1)) {
                    bw.write("Date:\t=B1");
                    bw.newLine();
                    output += "Date:\t=B1\r";
                }
            } //ends for loop
            
            //close file
            bw.close();
            
            //copy output to clipboard
            StringSelection selection = new StringSelection(output);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);
        } catch(IOException e) {
            e.printStackTrace();
        } //ends catch
    } //ends exportMatchups
    
    private void exportResults(int week) {
        //create the file name to export to 
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("MMddyy");
        
        String filePath = "C:\\Users\\Michael\\Documents\\Bowling Files\\Results\\" + league.getName() + "week" + week + "Results" + sdf.format(date) + ".txt";
        System.out.println(filePath);
        
        //string to hold output to go to clipboard
        String output = "";
        
        try {
            File teamFile = new File(filePath);
            //create the file if necessary
            if(!teamFile.exists()) {
                teamFile.createNewFile();
            } //ends if
                
            //objects used to write information to output file
            FileWriter fw = new FileWriter(teamFile.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            
            //date header
            bw.write("Date:\t" + sdf.format(date));
            bw.newLine();
            output += "Date:\t" + sdf.format(date) + "\r";
            
            //matchup array for the week
            Matchup[] matchup = league.getMatchupsForWeek(week);
            
            for(int i = 0; i < (league.getNumTeams() / 2); i++) {
                //pointers to the teams designated in the matchup for less calls to getTeam()
                BowlingTeam team1 = league.getTeam(matchup[i].getTeam1());
                BowlingTeam team2 = league.getTeam(matchup[i].getTeam2());
                //add 7 to lane because league starts on lane 7
                int lane = matchup[i].getLane() * 2 + 9;
                
                //team one
                bw.write("Team:\t" + team1.getName() + "\tLane:\t" + lane);
                bw.newLine();
                bw.write("HDCP\tPLAYERS\t1st Game\t2nd Game\t3rd Game\t");
                bw.newLine();
                for(int j = 0; j < league.getNumBowlers(); j++) {
                    Bowler b = team1.getBowler(j);
                    BowlingScore score1, score2, score3;
                    score1 = b.getScore(week-1, 0);
                    score2 = b.getScore(week-1, 1);
                    score3 = b.getScore(week-1, 2);
                    bw.write(score1.getHdcp() + "\t" + b.getName());
                    
                    if(b.isNewBowler()) {
                        bw.write(" (Dummy)"); 
                    } else {
                        //add RO to the names if needed
                        if(score1.isRolloff() && score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" RO");
                        } else if(score1.isRolloff() && !score2.isRolloff() && !score3.isRolloff()) {
                            bw.write(" 1st RO");
                        } else if(!score1.isRolloff() && score2.isRolloff() && !score3.isRolloff()) {
                            bw.write(" 2nd RO");
                        } else if(!score1.isRolloff() && !score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" 3rd RO");
                        } else if(score1.isRolloff() && score2.isRolloff() && !score3.isRolloff()) {
                            bw.write(" 1st/2nd RO");
                        } else if(!score1.isRolloff() && score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" 2nd/3rd RO");
                        } else if(score1.isRolloff() && !score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" 1st/3rd RO");
                        } //ends roll off section
                    
                        //add AB to the names if needed
                        if(score1.isAbsent() && score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" AB");
                        } else if(score1.isAbsent() && !score2.isAbsent() && !score3.isAbsent()) {
                            bw.write(" 1st AB");
                        } else if(!score1.isAbsent() && score2.isAbsent() && !score3.isAbsent()) {
                            bw.write(" 2nd AB");
                        } else if(!score1.isAbsent() && !score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" 3rd AB");
                        } else if(score1.isAbsent() && score2.isAbsent() && !score3.isAbsent()) {
                            bw.write(" 1st/2nd AB");
                        } else if(!score1.isAbsent() && score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" 2nd/3rd AB");
                        } else if(score1.isAbsent() && !score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" 1st/3rd AB");
                        } //ends absent section
                    } //ends new bowler                    
                                        
                    //write scores
                    bw.write("\t" + score1.getScore() + "\t" + score2.getScore() + "\t" + score3.getScore());
                    bw.newLine();                    
                } //ends for bowlers
                
                bw.newLine();
                
                //team two
                bw.write("Team:\t" + team2.getName() + "\tLane:\t" + (lane + 1));
                bw.newLine();
                bw.write("HDCP\tPLAYERS\t1st Game\t2nd Game\t3rd Game\t");
                bw.newLine();
                for(int j = 0; j < league.getNumBowlers(); j++) {
                    Bowler b = team2.getBowler(j);
                    BowlingScore score1, score2, score3;
                    score1 = b.getScore(week-1, 0);
                    score2 = b.getScore(week-1, 1);
                    score3 = b.getScore(week-1, 2);
                    bw.write(score1.getHdcp() + "\t" + b.getName());
                    
                    if(b.isNewBowler()) {
                        bw.write(" (Dummy)"); 
                    } else {
                        //add RO to the names if needed
                        if(score1.isRolloff() && score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" RO");
                        } else if(score1.isRolloff() && !score2.isRolloff() && !score3.isRolloff()) {
                            bw.write(" 1st RO");
                        } else if(!score1.isRolloff() && score2.isRolloff() && !score3.isRolloff()) {
                            bw.write(" 2nd RO");
                        } else if(!score1.isRolloff() && !score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" 3rd RO");
                        } else if(score1.isRolloff() && score2.isRolloff() && !score3.isRolloff()) {
                            bw.write(" 1st/2nd RO");
                        } else if(!score1.isRolloff() && score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" 2nd/3rd RO");
                        } else if(score1.isRolloff() && !score2.isRolloff() && score3.isRolloff()) {
                            bw.write(" 1st/3rd RO");
                        } //ends roll off section
                    
                        //add AB to the names if needed
                        if(score1.isAbsent() && score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" AB");
                        } else if(score1.isAbsent() && !score2.isAbsent() && !score3.isAbsent()) {
                            bw.write(" 1st AB");
                        } else if(!score1.isAbsent() && score2.isAbsent() && !score3.isAbsent()) {
                            bw.write(" 2nd AB");
                        } else if(!score1.isAbsent() && !score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" 3rd AB");
                        } else if(score1.isAbsent() && score2.isAbsent() && !score3.isAbsent()) {
                            bw.write(" 1st/2nd AB");
                        } else if(!score1.isAbsent() && score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" 2nd/3rd AB");
                        } else if(score1.isAbsent() && !score2.isAbsent() && score3.isAbsent()) {
                            bw.write(" 1st/3rd AB");
                        } //ends absent section
                    } //ends new bowler  
                    
                    //write scores
                    bw.write("\t" + score1.getScore() + "\t" + score2.getScore() + "\t" + score3.getScore());
                    bw.newLine();                    
                } //ends for bowlers
                
                bw.newLine();                
            } //ends for teams
                       
            //close file
            bw.close();
            
            //copy output to clipboard
            StringSelection selection = new StringSelection(output);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);
        } catch(IOException e) {
            e.printStackTrace();
        } //ends catch
    } //ends exportResults
    
    private void sortDummies(Bowler[] bowlers) {
        //bubble sorts dummies
        Bowler temp;
        for(int i = 0; i < (bowlers.length - 1); i++) {
            for(int j = 0; j < (bowlers.length - i - 1); j++) {
                if(bowlers[j].isNewBowler()) {
                    temp = bowlers[j];
                    bowlers[j] = bowlers[j+1];
                    bowlers[j+1] = temp;
                }
            }
        }
    } //ends sortDummies
    
    //sort bowlers by change in average
    private void sortByAvgChange(Bowler[] bowlers) {
        //bubble sort by average change
        Bowler temp;
        for(int i = 0; i < (bowlers.length - 1); i++) {
            for(int j = 0; j < (bowlers.length - i - 1); j++) {
                if(bowlers[j].averageChange() < bowlers[j+1].averageChange()) {
                    temp = bowlers[j];
                    bowlers[j] = bowlers[j+1];
                    bowlers[j+1] = temp;
                }
            }
        }
    } //ends sortByAvgChange
    
    private void sortByStdDev(Bowler[] bowlers) {
        //bubble sort by average change
        Bowler temp;
        for(int i = 0; i < (bowlers.length - 1); i++) {
            for(int j = 0; j < (bowlers.length - i - 1); j++) {
                if(bowlers[j].getStdDev() > bowlers[j+1].getStdDev()) {
                    temp = bowlers[j];
                    bowlers[j] = bowlers[j+1];
                    bowlers[j+1] = temp;
                }
            }
        }
    } //ends sortByStdDev
    
    //merge sort the teams by team name
    private void mergeSort(BowlingTeam[] teams, boolean byName) {
        if(teams.length > 1) {
            int mid = teams.length / 2;
            BowlingTeam[] leftArray = Arrays.copyOfRange(teams, 0, mid);
            BowlingTeam[] rightArray = Arrays.copyOfRange(teams, mid, teams.length);
        
            mergeSort(leftArray, byName);
            mergeSort(rightArray, byName);
            
            if(byName)
                mergeByName(teams, leftArray, rightArray);
            else
                mergeByPoints(teams, leftArray, rightArray);
        }
    }
    
    //function used by mergeSortName to merge arrays into a order by team name
    private void mergeByName(BowlingTeam[] teams, BowlingTeam[] left, BowlingTeam[] right) {
        //declare and initialze necessary counters
        int totalElem = left.length + right.length;
        int index = 0, leftIndex = 0, rightIndex = 0;
        
        while(index < totalElem) {
            //check to see if one of the arrays has merged all its elements already
            if(leftIndex < left.length && rightIndex < right.length) {
                //if the left team name is less than the right team name
                if(left[leftIndex].getName().compareToIgnoreCase(right[rightIndex].getName()) < 0) {
                    teams[index] = left[leftIndex];
                    index++;
                    leftIndex++;
                } else {
                    teams[index] = right[rightIndex];
                    index++;
                    rightIndex++;
                } //ends comparison                
            } else { //if one of the arrays is empty, copy the rest of the other array into teams
                //if left array is empty
                if(leftIndex >= left.length) {
                    //copy remaining right array into teams
                    while(rightIndex < right.length) {
                        teams[index] = right[rightIndex];
                        index++;
                        rightIndex++;
                    } //ends right array copy
                } //ends if left array empty
                if(rightIndex >= right.length) {
                    while(leftIndex < left.length) {
                        teams[index] = left[leftIndex];
                        index++;
                        leftIndex++;
                    } //ends left array copy
                } //ends if right array empty
            } //ends if/else                            
        } //ends while loop
    } //ends merge by name
        
    //function used by mergeSort to merge arrays into order by points
    private void mergeByPoints(BowlingTeam[] teams, BowlingTeam[] left, BowlingTeam[] right) {
        //declare and initialze necessary counters
        int totalElem = left.length + right.length;
        int index = 0, leftIndex = 0, rightIndex = 0;
        
        while(index < totalElem) {
            //check to see if one of the arrays has merged all its elements already
            if(leftIndex < left.length && rightIndex < right.length) {
                //if the left team has more points than the right team
                if(left[leftIndex].getTotalPoints() > right[rightIndex].getTotalPoints()) {
                    teams[index] = left[leftIndex];
                    index++;
                    leftIndex++;
                } else if(left[leftIndex].getTotalPoints() < right[rightIndex].getTotalPoints()){
                    //if the left team has less points than the right team
                    teams[index] = right[rightIndex];
                    index++;
                    rightIndex++;
                } else {                
                    //if the teams have the same number of points, sort by total pins
                    if(left[leftIndex].getTotalPins() > right[rightIndex].getTotalPins()) {
                        teams[index] = left[leftIndex];
                        index++;
                        leftIndex++;
                    } else {
                        teams[index] = right[rightIndex];
                        index++;
                        rightIndex++;
                    } //ends sorting by total pins
                } //ends sorting by total points
            } else { //if one of the arrays is empty, copy the rest of the other array into teams
                //if left array is empty
                if(leftIndex >= left.length) {
                    //copy remaining right array into teams
                    while(rightIndex < right.length) {
                        teams[index] = right[rightIndex];
                        index++;
                        rightIndex++;
                    } //ends right array copy
                } //ends if left array empty
                if(rightIndex >= right.length) {
                    while(leftIndex < left.length) {
                        teams[index] = left[leftIndex];
                        index++;
                        leftIndex++;
                    } //ends left array copy
                } //ends if right array empty
            } //ends if/else                            
        } //ends while loop
    } //ends mergeByPoints
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BowlingLeagueUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BowlingLeagueUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BowlingLeagueUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BowlingLeagueUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BowlingLeagueUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton alphabeticButton;
    private javax.swing.JRadioButton averageButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cancelLeagueButton;
    private javax.swing.JButton cancelTeamChangesButton;
    private javax.swing.JButton createLeagueButton;
    private javax.swing.JTextField editBowlerAbsentText;
    private javax.swing.JTextField editBowlerAvgText;
    private javax.swing.JButton editBowlerCancelButton;
    private javax.swing.JButton editBowlerDeleteButton;
    private javax.swing.JTextField editBowlerGame1Text;
    private javax.swing.JTextField editBowlerGame2Text;
    private javax.swing.JTextField editBowlerGame3Text;
    private javax.swing.JTextField editBowlerHdcpText;
    private javax.swing.JTextField editBowlerNameText;
    private javax.swing.JCheckBox editBowlerNewBowlerCheckbox;
    private javax.swing.JTabbedPane editBowlerPanel;
    private javax.swing.JTextField editBowlerPlayedText;
    private javax.swing.JTextField editBowlerPrevAvgText;
    private javax.swing.JTextField editBowlerRolloffText;
    private javax.swing.JButton editBowlerSaveButton;
    private javax.swing.JComboBox editBowlerSelectBowlerCombo;
    private javax.swing.JComboBox editBowlerSelectTeamCombo;
    private javax.swing.JPanel editBowlerTab;
    private javax.swing.JComboBox editBowlerWeekCombo;
    private javax.swing.JMenuItem editEditBowler;
    private javax.swing.JMenuItem editEditTeam;
    private javax.swing.JMenu editMenu;
    private javax.swing.JTextField editTeamAverage1;
    private javax.swing.JTextField editTeamAverage2;
    private javax.swing.JTextField editTeamAverage3;
    private javax.swing.JTextField editTeamAverage4;
    private javax.swing.JTextField editTeamAverage5;
    private javax.swing.JTextField editTeamAverage6;
    private javax.swing.JTextField editTeamBowlerName1;
    private javax.swing.JTextField editTeamBowlerName2;
    private javax.swing.JTextField editTeamBowlerName3;
    private javax.swing.JTextField editTeamBowlerName4;
    private javax.swing.JTextField editTeamBowlerName5;
    private javax.swing.JTextField editTeamBowlerName6;
    private javax.swing.JPanel editTeamBowlersPanel;
    private javax.swing.JTextField editTeamNameText;
    private javax.swing.JPanel editTeamPanel;
    private javax.swing.JPanel editTeamTeamPanel;
    private javax.swing.JButton endOfYearExportButton;
    private javax.swing.JPanel endOfYearTab;
    private javax.swing.JTextArea endOfYearTextArea;
    private javax.swing.JLabel enterScoreBowlerLabel1;
    private javax.swing.JLabel enterScoreBowlerLabel2;
    private javax.swing.JLabel enterScoreBowlerLabel3;
    private javax.swing.JLabel enterScoreBowlerLabel4;
    private javax.swing.JLabel enterScoreBowlerLabel5;
    private javax.swing.JLabel enterScoreBowlerLabel6;
    private javax.swing.JButton enterScoreFinaliazeButton;
    private javax.swing.JTextField enterScoreGame1Bowler1;
    private javax.swing.JTextField enterScoreGame1Bowler2;
    private javax.swing.JTextField enterScoreGame1Bowler3;
    private javax.swing.JTextField enterScoreGame1Bowler4;
    private javax.swing.JTextField enterScoreGame1Bowler5;
    private javax.swing.JTextField enterScoreGame1Bowler6;
    private javax.swing.JTextField enterScoreGame2Bowler1;
    private javax.swing.JTextField enterScoreGame2Bowler2;
    private javax.swing.JTextField enterScoreGame2Bowler3;
    private javax.swing.JTextField enterScoreGame2Bowler4;
    private javax.swing.JTextField enterScoreGame2Bowler5;
    private javax.swing.JTextField enterScoreGame2Bowler6;
    private javax.swing.JTextField enterScoreGame3Bowler1;
    private javax.swing.JTextField enterScoreGame3Bowler2;
    private javax.swing.JTextField enterScoreGame3Bowler3;
    private javax.swing.JTextField enterScoreGame3Bowler4;
    private javax.swing.JTextField enterScoreGame3Bowler5;
    private javax.swing.JTextField enterScoreGame3Bowler6;
    private javax.swing.JComboBox enterScoreLaneCombo;
    private javax.swing.JButton enterScoreNextLaneButton;
    private javax.swing.JButton enterScorePrevLaneButton;
    private javax.swing.JButton enterScoreSaveChanges;
    private javax.swing.JLabel enterScoreTeamLabel;
    private javax.swing.JComboBox enterScoreWeekCombo;
    private javax.swing.JPanel enterScoresPanel;
    private javax.swing.JMenuItem fileExit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileNew;
    private javax.swing.JMenuItem fileOpen;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JMenuItem fileSaveAs;
    private javax.swing.JButton finalizeTeamChangesButton;
    private javax.swing.JLabel homeLabel1;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moveBowlerDown1;
    private javax.swing.JButton moveBowlerDown2;
    private javax.swing.JButton moveBowlerDown3;
    private javax.swing.JButton moveBowlerDown4;
    private javax.swing.JButton moveBowlerDown5;
    private javax.swing.JButton moveBowlerDown6;
    private javax.swing.JButton moveBowlerUp1;
    private javax.swing.JButton moveBowlerUp2;
    private javax.swing.JButton moveBowlerUp3;
    private javax.swing.JButton moveBowlerUp4;
    private javax.swing.JButton moveBowlerUp5;
    private javax.swing.JButton moveBowlerUp6;
    private javax.swing.JTextField newLeagueNameText;
    private javax.swing.JTextField newLeagueNumBowlersText;
    private javax.swing.JTextField newLeagueNumTeamsText;
    private javax.swing.JTextField newLeagueNumWeeksText;
    private javax.swing.JPanel newLeaguePanel;
    private javax.swing.JButton saveTeamChangesButton;
    private javax.swing.JRadioButton sortByNameButton;
    private javax.swing.JRadioButton sortByStandingButton;
    private javax.swing.JRadioButton sortByTeamIDButton;
    private javax.swing.JComboBox teamComboBox;
    private javax.swing.JButton viewBowlerExportButton;
    private javax.swing.JPanel viewBowlerPanel;
    private javax.swing.JTextArea viewBowlerTextArea;
    private javax.swing.JLabel viewMatchTeam0;
    private javax.swing.JLabel viewMatchTeam1;
    private javax.swing.JLabel viewMatchTeam2;
    private javax.swing.JLabel viewMatchTeam3;
    private javax.swing.JLabel viewMatchTeam4;
    private javax.swing.JLabel viewMatchTeam5;
    private javax.swing.JLabel viewMatchTeam6;
    private javax.swing.JLabel viewMatchTeam7;
    private javax.swing.JLabel viewMatchTeam8;
    private javax.swing.JLabel viewMatchTeam9;
    private javax.swing.JComboBox viewMatchWeekCombo;
    private javax.swing.JButton viewMatchupExportButton;
    private javax.swing.JPanel viewMatchupPanel;
    private javax.swing.JPanel viewTeamStatsTab;
    private javax.swing.JTextArea viewTeamStatsTextArea;
    private javax.swing.JButton viewTeamsExportButton;
    // End of variables declaration//GEN-END:variables
}
